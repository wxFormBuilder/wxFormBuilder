<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<package name="default" desc="Default objects, do not edit this file">

  <objectinfo class="Project" smallIcon="project.xpm" type="project">
    <property name="name" type="text">MyProject</property>
    <property name="path" type="path" help="The path to generated files">.</property>
    <property name="embedded_files_path" type="path" help="The path to generated files for embedded files">res</property>
    <property name="file" type="text" help="The filenames for generated files"/>
    <property name="relative_path" type="bool" help="Use relative paths for external files ( e.g. image files )">1</property>
    <property name="first_id" type="text" help="All GUI controls have an integer ID, this is the value for the first control, each additional control with increment by 1.">1000</property>
    <property name="code_generation" type="bitlist">
      <option name="C++" help="Generate C++ Code"/>
      <option name="Python" help="Generate Python Code"/>
      <option name="PHP" help="Generate PHP Code"/>
      <option name="XRC" help="Generate XRC Code"/>
      <option name="Lua" help="Generate Lua Code"/>
      <option name="Erlang" help="Generate Erlang Code"/>
      C++
    </property>
    <property name="internationalize" type="bool" help="For C++ Only.&#x0A;Generate strings with _() macro instead of wxT() macro. This allows for translation.">0</property>
    <category name="C++ Properties">
      <property name="use_enum" type="bool" help="For C++ Only.&#x0A;Generate an enumeration for control IDs instead of a list of #defines">0</property>
      <property name="use_array_enum" type="bool" help="For C++ Only.&#x0A;Generate an enumeration for the dimensions of arrays">0</property>
      <property name="use_microsoft_bom" type="bool" help="For C++ and WXMSW Only.&#x0A;Files are generated with UTF-8 encoding. Microsoft compilers expect a specific byte sequence at the beginning of a file. GCC does NOT expect this. Only set this to true when using a Microsoft compiler.">0</property>
      <property name="precompiled_header" type="text" help="For C++ Only.&#x0A;The exact code to be generated at the top of the source file to support precompiled headers. For example, to include wxprec.h, the value of this property should be:&#x0A;#include &lt;wx/wxprec.h&gt;"/>
      <property name="class_decoration" type="parent" help="For C++ Only.&#x0A;Used to decorate classes with DLL export macros.">
        <child name="decoration" help="The name of the macro or the dll export decoration."/>
        <child name="header" help="Optional header file where the export macro is defined."/>
      </property>
      <property name="encoding" type="option" help="">
        <option name="UTF-8"/>
        <option name="ANSI"/>
        UTF-8
      </property>
      <property name="namespace" type="stringlist" help="For C++ Only.&#x0A;Namespaces to wrap class declarations in."/>
      <property name="event_generation" type="option" help="For C++ Only.&#x0A;Type of event connection to generate.">
        <option name="connect" help="Use the Connect() function to link event handlers to events."/>
        <option name="table" help="Use event macro tables to link event handlers to events."/>
        connect
      </property>
      <property name="disconnect_events" type="bool" help="For event_generation=connect Only.&#x0A;Disconnect events in the destructor.">1</property>
      <property name="help_provider" type="option" help="For C++ Only.&#x0A;The class of help provider to use for context-sensitive help.">
        <option name="none" help="No support for context-sensitive help."/>
        <option name="wxSimpleHelpProvider" help="Use wxSimpleHelpProvider to provide context-sensitive help."/>
        <option name="wxHelpControllerHelpProvider" help="Use wxHelpControllerHelpProvider to provide context-sensitive help."/>
        none
      </property>
    </category>
    <category name="Lua Properties">
      <property name="skip_lua_events" type="bool" help="For Lua Only.&#x0A;Call Skip() function in all generated event handlers.">1</property>
      <property name="ui_table" type="text" help="For Lua Only.&#x0A;Define a table which will store- all UI stuff you'll create.">UI</property>
    </category>
    <category name="Python Properties">
      <property name="skip_python_events" type="bool" help="For Python Only.&#x0A;Call Skip() function in all generated event handlers.">1</property>
      <property name="disconnect_python_events" type="bool" help="For Python Only.&#x0A;Disconnect events in the destructor.">0</property>
      <property name="disconnect_mode" type="option" help="For Python Only.&#x0A;Choose which strategy will be used for disconnecting of events (due to different prototypes of Unbind() function in wxPython).">
        <option name="source_name" help="Pass source widget name to Unbind() function."/>
        <option name="handler_name" help="Pass event handler name to Unbind() function."/>
        source_name
      </property>
      <property name="indent_with_spaces" type="bool" help="For Python only.&#x0A;Use 4-spaces for indentation instead of tabs"/>
      <property name="image_path_wrapper_function_name" type="text" help="For Python only.&#x0A;Wrap image paths into a function with this name.&#x0A;Useful for freezing the application." />
    </category>
    <category name="PHP Properties">
      <property name="skip_php_events" type="bool" help="For PHP Only.&#x0A;Call Skip() function in all generated event handlers.">1</property>
      <property name="disconnect_php_events" type="bool" help="For PHP Only.&#x0A;Disconnect events in the destructor.">0</property>
      <property name="disconnect_mode" type="option" help="For PHP Only.&#x0A;Choose which strategy will be used for disconnecting of events (due to different prototypes of Unbind() function in wxPHP).">
        <option name="source_name" help="Pass source widget name to Unbind() function."/>
        <option name="handler_name" help="Pass event handler name to Unbind() function."/>
        source_name
      </property>
    </category>
    <category name="Erlang Properties">
      <property name="create_prefix" type="text" help="For Erlang Only.&#x0A;Prefix name for the widows's creation function">create</property>
      <property name="create_parent" type="bool" help="For Erlang Only.&#x0A;Use the parent parameter as a form instead of create it in the function.">1</property>
      <property name="lower_identifier" type="bool" help="For Erlang Only.&#x0A;Forces the entire name of the identifiers to lowercase.">1</property>
      <property name="skip_erlang_events" type="bool" help="For Erlang Only.&#x0A;Call Skip() function in all generated event handlers.">1</property>
    </category>
  </objectinfo>
  <objectinfo class="C++" smallIcon="c++.png" type="interface">
    <property name="permission" type="option" hidden="1">
      <option name="none"/>
      <option name="private"/>
      <option name="protected"/>
      <option name="public"/>
      protected
    </property>
  </objectinfo>

  <objectinfo class="UserCode" type="interface">
    <property name="enable_user_code" type="bool">0</property>
    <property name="user_cpp_code" type="text"/>
    <property name="user_python_code" type="text"/>
    <property name="user_lua_code" type="text"/>
    <property name="user_erlang_code" type="text" />
    <!--property name="insertion_mode" type="option">
      <option name="prepend"/>
      <option name="insert"/>
      <option name="append"/>append
    </property-->
  </objectinfo>

  <objectinfo class="wxWindow" smallIcon="wxwindow.png" type="interface">
    <property name="id" type="macro">wxID_ANY</property>
    <property name="pos" type="wxPoint" help="Window position. The default is (-1, -1) which indicates that wxWidgets should generate a default position for the window."/>
    <property name="size" type="wxSize" help="Window size. The default is (-1, -1) which indicates that wxWidgets should generate a default size for the window."/>
    <property name="minimum_size" type="wxSize" help="Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size."/>
    <property name="maximum_size" type="wxSize" help="Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum allowable size."/>
    <property name="font" type="wxFont" help="Sets the font for this window. This should not be use for a parent window if you don't want its font to be inherited by its children"/>
    <property name="fg" type="wxColour" help="Sets the foreground colour of the window."/>
    <property name="bg" type="wxColour" help="Sets the background colour of the window."/>
    <property name="window_name" type="wxString"help="The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows."/>
    <property name="window_style" type="bitlist">
      <option name="wxBORDER_DEFAULT" help="The window class will decide the kind of border to show, if any."/>
      <option name="wxBORDER_SIMPLE" help="Displays a thin border around the window. wxSIMPLE_BORDER is the old name for this style."/>
      <option name="wxBORDER_SUNKEN" help="Displays a sunken border. wxSUNKEN_BORDER is the old name for this style."/>
      <option name="wxBORDER_RAISED" help="Displays a raised border. wxRAISED_BORDER is the old name for this style."/>
      <option name="wxBORDER_STATIC" help="Displays a border suitable for a static control. wxSTATIC_BORDER is the old name for this style. Windows only."/>
      <option name="wxBORDER_THEME" help="Displays a native border suitable for a control, on the current platform. On Windows XP or Vista, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows."/>
      <option name="wxBORDER_NONE" help="Displays no border, overriding the default border style for the window. wxNO_BORDER is the old name for this style."/>
      <option name="wxTRANSPARENT_WINDOW" help="The window is transparent, that is, it will not receive paint events. Windows only."/>
      <option name="wxTAB_TRAVERSAL" help="Use this to enable tab traversal for non-dialog windows."/>
      <option name="wxWANTS_CHARS" help="Use this to indicate that the window wants to get all char/key events for all keys - even for keys like TAB or ENTER which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab."/>
      <option name="wxVSCROLL" help="Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports."/>
      <option name="wxHSCROLL" help="Use this style to enable a horizontal scrollbar. The same limitations as for wxVSCROLL apply to this style."/>
      <option name="wxALWAYS_SHOW_SB" help="If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms."/>
      <option name="wxCLIP_CHILDREN" help="Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only."/>
      <option name="wxFULL_REPAINT_ON_RESIZE" help="Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Note that this was the behaviour by default before 2.5.1 release and that if you experience redraw problems with code which previously used to work you may want to try this. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms."/>
      <option name="wxNO_FULL_REPAINT_ON_RESIZE" help="On Windows, this style used to disable repainting the window completely when its size is changed. Since this behaviour is now the default, the style is now obsolete and no longer has an effect."/>
    </property>
    <property name="window_extra_style" type="bitlist">
      <option name="wxWS_EX_VALIDATE_RECURSIVELY" help="By default, Validate/TransferDataTo/FromWindow() only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows."/>
      <option name="wxWS_EX_BLOCK_EVENTS" help="wxCommandEvents and the objects of the derived classes are forwarded to the parent window and so on recursively by default. Using this flag for the given window allows to block this propagation at this window, i.e. prevent the events from being propagated further upwards. Dialogs have this flag on by default."/>
      <option name="wxWS_EX_TRANSIENT" help="Don't use this window as an implicit parent for the other windows: this must be used with transient windows as otherwise there is the risk of creating a dialog/frame with this window as a parent which would lead to a crash if the parent is destroyed before the child."/>
      <option name="wxWS_EX_CONTEXTHELP" help="Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a wxEVT_HELP event if the user clicked on an application window. This style cannot be used (because of the underlying native behaviour) together with wxMAXIMIZE_BOX or wxMINIMIZE_BOX, so these two styles are automatically turned off if this one is used."/>
      <option name="wxWS_EX_PROCESS_IDLE" help="This window should always process idle events, even if the mode set by wxIdleEvent::SetMode is wxIDLE_PROCESS_SPECIFIED."/>
      <option name="wxWS_EX_PROCESS_UI_UPDATES" help="This window should always process UI update events, even if the mode set by wxUpdateUIEvent::SetMode is wxUPDATE_UI_PROCESS_SPECIFIED."/>
    </property>
    <property name="tooltip" type="wxString_i18n" help="Attach a tooltip to the window."/>
    <property name="context_menu" type="bool" help="Generates event handler for displaying of menu assigned to this widgets as a context menu.">1</property>
    <property name="context_help" type="wxString_i18n" help="Attach context-sensitive help to the window. Note: The Project's &quot;help_provider&quot; property must be set for context-sensitive help to work."/>
    <property name="enabled" type="bool" help="Enable or disable the window for user input. Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is.">1</property>
    <property name="hidden" type="bool" help="Shows or hides the window.">0</property>
    <property name="subclass" type="parent" help="For easy use of custom widgets which are simple variations from standard ones, without requiring a new plugin for wxFB or a full xrc handler for wxWidgets. For C++, this replaces the name of the class. For XRC, this sets the subclass value on the object tag.">
      <child name="name" help="The name of the subclass."/>
      <child name="header" help="For C++ Only. The header to be included for the subclass."/>
      <!-- Note: Because the element type parent is stored in the format of a composed wxPGProperty the value has to be specified in this format:
                 true == forward_declare
                 false == Not forward_declare
      -->
      <child name="forward_declare" type="bool" help="For C++ Only. Forward declare the subclass, otherwise include the header.">forward_declare</child>
    </property>
    <property name="generate_export" type="bool" help="For Erlang Only. Will add the creation function to an export declaration.">1</property>
    <category name="wxKeyEvent" type="interface">
      <event name="OnChar" class="wxKeyEvent" help="Process a wxEVT_CHAR event."/>
      <event name="OnCharHook" class="wxKeyEvent" help="Process a wxEVT_CHAR_HOOK event. Unlike all the other key events, this event is propagated upwards the window hierarchy which allows intercepting it in the parent window of the focused window to which it is sent initially (if there is no focused window, this event is sent to the wxApp global object). It is also generated before any other key events and so gives the parent window an opportunity to modify the keyboard handling of its children, e.g. it is used internally by wxWidgets in some ports to intercept pressing Esc key in any child of a dialog to close the dialog itself when it's pressed. By default, if this event is handled, i.e. the handler doesn't call wxEvent::Skip(), neither wxEVT_KEY_DOWN nor wxEVT_CHAR events will be generated (although wxEVT_KEY_UP still will be), i.e. it replaces the normal key events. However by calling the special DoAllowNextEvent() method you can handle wxEVT_CHAR_HOOK and still allow normal events generation. This is something that is rarely useful but can be required if you need to prevent a parent wxEVT_CHAR_HOOK handler from running without suppressing the normal key events. Finally notice that this event is not generated when the mouse is captured as it is considered that the window which has the capture should receive all the keyboard events too without allowing its parent wxTopLevelWindow to interfere with their processing."/>
      <event name="OnKeyDown" class="wxKeyEvent" help="Process a wxEVT_KEY_DOWN event (any key has been pressed). If this event is handled and not skipped, wxEVT_CHAR will not be generated at all for this key press (but wxEVT_KEY_UP will be)."/>
      <event name="OnKeyUp" class="wxKeyEvent" help="Process a wxEVT_KEY_UP event (any key has been released)."/>
    </category>
    <category name="wxMouseEvent" type="interface">
      <event name="OnEnterWindow" class="wxMouseEvent" help="Process a wxEVT_ENTER_WINDOW event."/>
      <event name="OnLeaveWindow" class="wxMouseEvent" help="Process a wxEVT_LEAVE_WINDOW event."/>
      <event name="OnLeftDClick" class="wxMouseEvent" help="Process a wxEVT_LEFT_DCLICK event."/>
      <event name="OnLeftDown" class="wxMouseEvent" help="Process a wxEVT_LEFT_DOWN event."/>
      <event name="OnLeftUp" class="wxMouseEvent" help="Process a wxEVT_LEFT_UP event."/>
      <event name="OnMiddleDClick" class="wxMouseEvent" help="Process a wxEVT_MIDDLE_DCLICK event."/>
      <event name="OnMiddleDown" class="wxMouseEvent" help="Process a wxEVT_MIDDLE_DOWN event."/>
      <event name="OnMiddleUp" class="wxMouseEvent" help="Process a wxEVT_MIDDLE_UP event."/>
      <event name="OnRightDClick" class="wxMouseEvent" help="Process a wxEVT_RIGHT_DCLICK event."/>
      <event name="OnRightDown" class="wxMouseEvent" help="Process a wxEVT_RIGHT_DOWN event."/>
      <event name="OnRightUp" class="wxMouseEvent" help="Process a wxEVT_RIGHT_UP event."/>
      <event name="OnAux1DClick" class="wxMouseEvent" help="Process a wxEVT_AUX1_DCLICK event."/>
      <event name="OnAux1Down" class="wxMouseEvent" help="Process a wxEVT_AUX1_DOWN event."/>
      <event name="OnAux1Up" class="wxMouseEvent" help="Process a wxEVT_AUX1_UP event."/>
      <event name="OnAux2DClick" class="wxMouseEvent" help="Process a wxEVT_AUX2_DCLICK event."/>
      <event name="OnAux2Down" class="wxMouseEvent" help="Process a wxEVT_AUX2_DOWN event."/>
      <event name="OnAux2Up" class="wxMouseEvent" help="Process a wxEVT_AUX2_UP event."/>
      <event name="OnMotion" class="wxMouseEvent" help="Process a wxEVT_MOTION event."/>
      <event name="OnMouseWheel" class="wxMouseEvent" help="Process a wxEVT_MOUSEWHEEL event."/>
      <event name="OnMouseEvents" class="wxMouseEvent" help="Process all mouse events."/>
    </category>
    <category name="wxFocusEvent" type="interface">
      <event name="OnKillFocus" class="wxFocusEvent" help="Process a wxEVT_KILL_FOCUS event."/>
      <event name="OnSetFocus" class="wxFocusEvent" help="Process a wxEVT_SET_FOCUS event."/>
    </category>
    <category name="Other Events" type="interface">
      <event name="OnEraseBackground" class="wxEraseEvent" help="Process a wxEVT_ERASE_BACKGROUND event."/>
      <event name="OnPaint" class="wxPaintEvent" help="Process a wxEVT_PAINT event."/>
      <event name="OnSize" class="wxSizeEvent" help="Process a wxEVT_SIZE event."/>
      <event name="OnMove" class="wxMoveEvent" help="Process a wxEVT_MOVE event, which is generated when a window is moved. Not generated in wxGTK" />
      <event name="OnUpdateUI" class="wxUpdateUIEvent" help="Process a wxEVT_UPDATE_UI event."/>
    </category>
  </objectinfo>

  <objectinfo class="wxTreeCtrlBase" type="interface">
    <event name="OnTreeBeginDrag" class="wxTreeEvent" help="Begin dragging with the left mouse button."/>
    <event name="OnTreeBeginRDrag" class="wxTreeEvent" help="Begin dragging with the right mouse button."/>
    <event name="OnTreeEndDrag" class="wxTreeEvent" help="End dragging with the left or right mouse button."/>
    <event name="OnTreeBeginLabelEdit" class="wxTreeEvent" help="Begin editing a label. This can be prevented by calling Veto()."/>
    <event name="OnTreeEndLabelEdit" class="wxTreeEvent" help="Finish editing a label. This can be prevented by calling Veto()."/>
    <event name="OnTreeDeleteItem" class="wxTreeEvent" help="Delete an item."/>
    <event name="OnTreeItemActivated" class="wxTreeEvent" help="The item has been activated, i.e. chosen by double clicking it with mouse or from keyboard."/>
    <event name="OnTreeItemCollapsed" class="wxTreeEvent" help="The item has been collapsed."/>
    <event name="OnTreeItemCollapsing" class="wxTreeEvent" help="The item is being collapsed. This can be prevented by calling Veto()."/>
    <event name="OnTreeItemExpanded" class="wxTreeEvent" help="The item has been expanded."/>
    <event name="OnTreeItemExpanding" class="wxTreeEvent" help="The item is being expanded. This can be prevented by calling Veto()."/>
    <event name="OnTreeItemRightClick" class="wxTreeEvent" help="The user has clicked the item with the right mouse button"/>
    <event name="OnTreeItemMiddleClick" class="wxTreeEvent" help="The user has clicked the item with the middle mouse button."/>
    <event name="OnTreeSelChanged" class="wxTreeEvent" help="Selection has changed."/>
    <event name="OnTreeSelChanging" class="wxTreeEvent" help="Selection is changing. This can be prevented by calling Veto()."/>
    <event name="OnTreeKeyDown" class="wxTreeEvent" help="A key has been pressed."/>
    <event name="OnTreeItemMenu" class="wxTreeEvent" help="The context menu for the selected item has been requested, either by a right click or by using the menu key."/>
  </objectinfo>

  <objectinfo class="wxAnyButton" type="interface">
    <property name="label" type="wxString_i18n">MyButton</property>
    <property name="markup" type="bool" help="Simple markup can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and SetLabel() is used with the resulting string.&#x0A;Since 2.9.2.">0</property>
    <property name="bitmap" type="bitmap" help="This is the bitmap shown in the default state, it must be always valid while all the other bitmaps are optional and don't have to be set."/>
    <property name="disabled" type="bitmap" help="Bitmap shown when the button is disabled."/>
    <property name="pressed" type="bitmap" help="Bitmap shown when the button is pushed (e.g. while the user keeps the mouse button pressed on it)."/>
    <property name="focus" type="bitmap" help="Bitmap shown when the button has keyboard focus but is not pressed."/>
    <property name="current" type="bitmap" help="Bitmap shown when the mouse is over the button (but it is not pressed). Notice that if hover bitmap is not specified but the current platform UI uses hover images for the buttons (such as Windows XP or GTK+), then the focus bitmap is used for hover state as well. This makes it possible to set focus bitmap only to get reasonably good behaviour on all platforms."/>
    <property name="position" type="option">
      <option name=""/>
      <option name="wxLEFT" help="Positions the bitmap at the left"/>
      <option name="wxRIGHT" help="Positions the bitmap at the right"/>
      <option name="wxTOP" help="Positions the bitmap at the top"/>
      <option name="wxBOTTOM" help="Positions the bitmap at the bottom"/>
    </property>
    <property name="margins" type="wxSize" help="The margins between the bitmap and the text of the button. This is currently only implemented under MSW. If it is not specified, default margin is used around the bitmap."/>
  </objectinfo>

  <objectinfo class="UserClasses" type="interface">
    <property name="name" type="text"/>
    <property name="basename" type="text"/>
    <property name="file" type="text"/>
    <property name="gen_file" type="text"/>
    <property name="type" type="text"/>
    <category name="C++ Properties">
      <property name="precompiled_header" type="text"/>
    </category>
  </objectinfo>

  <objectinfo class="AUI" type="interface">
    <property name="aui_name" type="wxString" help="Sets the internal name of the pane."/>
    <property name="caption_visible" type="bool" help="Indicates that a pane caption should be visible.">1</property>
    <property name="caption" type="wxString_i18n" help="Sets the caption of the pane."/>
    <property name="close_button" type="bool" help="Indicates that a close button should be drawn for the pane.">1</property>
    <property name="maximize_button" type="bool" help="Indicates that a maximize button should be drawn for the pane.">0</property>
    <property name="minimize_button" type="bool" help="Indicates that a minimize button should be drawn for the pane.">0</property>
    <property name="pin_button" type="bool" help="Indicates that a pin button should be drawn for the pane.">1</property>
    <property name="pane_border" type="bool" help="Indicates that a border should be drawn for the pane.">1</property>
    <property name="show" type="bool" help="Indicates that a pane should be shown.">1</property>
    <property name="gripper" type="bool" help="Indicates that a gripper should be drawn for the pane.">0</property>

    <property name="center_pane" type="bool" help="Specifies that the pane should adopt the default center pane settings. Centre panes usually do not have caption bars. This function provides an easy way of preparing a pane to be displayed in the center dock position.">0</property>
    <property name="default_pane" type="bool" help="Specifies that the pane should adopt the default pane settings.">0</property>
    <property name="toolbar_pane" type="bool" help="Specifies that the pane should adopt the default toolbar pane settings.">0</property>

    <property name="moveable" type="bool" help="Indicates whether a frame can be moved.">1</property>
    <property name="resize" type="option">
      <option name="Resizable" help="Allows a pane to be resized if the parameter is true, and forces it to be a fixed size if the parameter is false."/>
      <option name="Fixed" help="Forces a pane to be fixed size so that it cannot be resized."/>
      Resizable
    </property>
    <property name="pane_size" type="wxSize" help="Sets the size of the floating pane."/>
    <property name="best_size" type="wxSize" help="Sets the ideal size for the pane."/>
    <property name="min_size" type="wxSize" help="Sets the minimum size of the pane."/>
    <property name="max_size" type="wxSize" help="Sets the maximum size of the pane."/>

    <property name="dock" type="option">
      <option name="Dock" help="Indicates that a pane should be docked."/>
      <option name="Float" help="Indicates that a pane should be floated."/>
      Dock
    </property>
    <property name="dock_fixed" type="bool" help="Causes the containing dock to have no resize sash. This is useful for creating panes that span the entire width or height of a dock, but should not be resizable in the other direction.">0</property>
    <property name="floatable" type="bool" help="Sets whether the user will be able to undock a pane and turn it into a floating window.">1</property>
    <property name="BottomDockable" type="bool" help="Indicates whether a pane can be docked at the bottom of the frame.">1</property>
    <property name="TopDockable" type="bool" help="Indicates whether a pane can be docked at the top of the frame.">1</property>
    <property name="LeftDockable" type="bool" help="Indicates whether a pane can be docked on the left of the frame.">1</property>
    <property name="RightDockable" type="bool" help="Indicates whether a pane can be docked on the right of the frame.">1</property>

    <property name="docking" type="option" help="Determines the direction of the docked pane.">
      <option name="Top"/>
      <option name="Bottom"/>
      <option name="Left"/>
      <option name="Center"/>
      <option name="Right"/>
      Left
    </property>
    <property name="pane_position" type="wxPoint" help="Sets the position of the floating pane."/>
    <property name="aui_position" type="uint" help="Determines the position of the docked pane."/>
    <property name="aui_row" type="uint" help="Determines the row of the docked pane."/>
    <property name="aui_layer" type="uint" help="Determines the layer of the docked pane. The dock layer is similar to an onion, the inner-most layer being layer 0. Each shell moving in the outward direction has a higher layer number. This allows for more complex docking layout formation."/>
  </objectinfo>

  <objectinfo class="Validator" type="interface">
    <property name="validator_type" type="option" hidden="1" help="For C++ Only.&#x0A;Type of a validator assigned to the window">
      <option name="wxDefaultValidator" help="Default validator (does nothing)"/>
      <option name="wxGenericValidator" help="Generic validator. Transfers data from/to window ."/>
      <option name="wxTextValidator" help="Text validator. Transfer data from/to window and allows basic data filtering."/>
      wxDefaultValidator
    </property>
    <property name="validator_style" type="bitlist" help="For C++ Only.&#x0A;Data filtering style for wxTextValidator.">
      <option name="wxFILTER_NONE" help="No filtering takes place."/>
      <option name="wxFILTER_ASCII" help="Non-ASCII characters are filtered out."/>
      <option name="wxFILTER_ALPHA" help="Non-alpha characters are filtered out."/>
      <option name="wxFILTER_ALPHANUMERIC" help="Non-alphanumeric characters are filtered out."/>
      <option name="wxFILTER_NUMERIC" help="Non-numeric characters are filtered out."/>
      <option name="wxFILTER_INCLUDE_LIST" help="Use an include list. The validator checks if the user input is on the list, complaining if not. See wxTextValidator::SetIncludes."/>
      <option name="wxFILTER_EXCLUDE_LIST" help="Use an exclude list. The validator checks if the user input is on the list, complaining if it is. See wxTextValidator::SetExcludes."/>
      <option name="wxFILTER_INCLUDE_CHAR_LIST" help="Use an include list. The validator checks if each input character is in the list (one character per list element), complaining if not. See wxTextValidator::SetIncludes."/>
      <option name="wxFILTER_EXCLUDE_CHAR_LIST" help="Use an include list. The validator checks if each input character is in the list (one character per list element), complaining if it is. See wxTextValidator::SetExcludes."/>
      wxFILTER_NONE
    </property>
    <property name="validator_variable" type="text" help="For C++ Only.&#x0A;Name of a member variable associated with the validator"/>
    <property name="validator_data_type" type="option" hidden="1" help="For C++ Only.&#x0A;Data type of the member variable">
      <option name="" help ="Undefined data type."/>
      <option name="bool" help="Logical value. This should be used for wxCheckBox and wxRadioButton."/>
      <option name="int" help="Signed integer value. This should be used for wxGauge, wxScrollBar, wxRadioBox, wxSpinButton, wxChoice."/>
      <option name="wxString" help="String value. This should be used for wxButton, wxComboBox, wxStaticText, wxTextCtrl."/>
      <option name="wxArrayInt" help="Array of integers. This should be used for wxListBox, wxCheckListBox."/>
    </property>
  </objectinfo>

</package>
