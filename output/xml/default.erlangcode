<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<codegen language="Erlang">
    <templates class="Project">
    	<template name="erlang_preamble">
            %% #nl
            %%  Copyright #copyright. All Rights Reserved. #nl
            %% #nl
            %%  Licensed under the Apache License, Version 2.0 (the "License"); #nl
            %%  you may not use this file except in compliance with the License. #nl
            %%  You may obtain a copy of the License at #nl
            %% #nl
            %%     http://www.apache.org/licenses/LICENSE-2.0 #nl
            %% #nl
            %%  Unless required by applicable law or agreed to in writing, software #nl
            %%  distributed under the License is distributed on an "AS IS" BASIS, #nl
            %%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #nl
            %%  See the License for the specific language governing permissions and #nl
            %%  limitations under the License. #nl
            %%
		</template>
		<template name="include">
			-include_lib("wx/include/wx.hrl"). #nl
		</template>
		<template name="export">
		</template>
		<template name="full_export_header">
			-behaviour(wx_object). #nl
			-export([start/0, start/1, start_link/0, start_link/1, #indent #indent #nl
			init/1, terminate/2, code_change/3, #nl
			handle_sync_event/3, handle_event/2, handle_info/2, handle_call/3, handle_cast/2]). #nl #unindent #unindent
			#nl
			#nl
			-record(state, #indent #indent #nl
			 {win, #nl
			  config #nl
			}). #unindent #unindent
		</template>
		<template name="full_export_start">
			start() -> #indent #nl
			start([]). #unindent #nl
			#nl
			start(Config) -> #indent #nl
			wx_object:start(?MODULE, Config, []). #unindent #nl
			#nl
			start_link() -> #indent #nl
			start_link([]). #unindent #nl
			#nl
			start_link(Config) -> #indent #nl
			wx_object:start_link(?MODULE, Config, []). #unindent #nl
		</template>
		<template name="full_export_events_sync">
			handle_sync_event(Ev = #wx{}, _wxObj, State = #state{}) -> #indent #nl
			io:format(State#state.config,"Got Event ~p~n",[Ev]), #nl
			{noreply,State}. #unindent #nl
			#nl
		</template>
		<template name="full_export_events_async">
			handle_event(Ev = #wx{}, State = #state{}) -> #indent #nl
			io:format(State#state.config,"Got Event ~p~n",[Ev]), #nl
			{noreply,State}. #unindent #nl
			#nl
		</template>
		<template name="full_export_events_end">
			%% Callbacks handled as normal gen_server callbacks #nl
			handle_info(Msg, State) -> #indent #nl
			io:format(State#state.config, "Got Info ~p~n",[Msg]), #nl
			{noreply,State}. #unindent #nl
			#nl
			handle_call(shutdown, _From, State=#state{parent=Parent}) -> #indent #nl
			wxWindow:destroy(Parent), #nl
			{stop, normal, ok, State}; #unindent #nl
			#nl
			handle_call(Msg, _From, State) -> #indent #nl
			io:format(State#state.config,"Got Call ~p~n",[Msg]), #nl
			{reply,ok,State}. #unindent #nl
			#nl
			handle_cast(Msg, State) -> #indent #nl
			io:format("Got cast ~p~n",[Msg]), #nl
			{noreply,State}. #unindent #nl
			#nl
			code_change(_, _, State) -> #indent #nl
			{stop, ignore, State}. #unindent #nl
			#nl
			terminate(_Reason, _) -> #indent #nl
			ok. #unindent
		</template>
		<template name="erlang_epilogue">
		</template>
    </templates>
    <templates class="wxWindow">
		<template name="settings">
			#ifnotnull $window_extra_style
			@{ #class:setExtraStyle($name, $window_extra_style), #nl @}

			#ifnotnull $font
			@{ #class:setFont($name, $font), #nl @}

			#ifnotnull $fg
			@{ #class:SetForegroundColour($name, $fg), #nl @}

			#ifnotnull $bg
			@{ #class:setBackgroundColour($name, $bg), #nl @}

			#ifequal $enabled "0"
			@{ #class:enable($name, [{enable,$enabled }]), #nl @}

			#ifequal $hidden "1"
			@{ #class:hide($name), #nl @}

			#ifnotnull $tooltip
			@{ #class:setToolTip($name, $tooltip), #nl @}

			#ifnotnull $context_help
			@{ #class:setHelpText($name, $context_help), #nl @}

			#ifnull $maximum_size
			@{ #ifnotnull $minimum_size
			   @{ wxWindow:setSizeHints($name, $minimum_size), #nl @}
            @}
			#ifnotnull $maximum_size
			@{ wxWindow:setSizeHints($name, $minimum_size, [{maxSize,$maximum_size }]), #nl @}

			#ifparenttypeequal "toolbar_form"
			@{ wxToolBar:addControl(#wxparent, $name), @}
		</template>

		<!-- wxKeyEvent -->
		<template name="evt_connect_OnChar">#class:connect($name, char, #option),</template>
		<template name="evt_connect_OnCharHook">#class:connect($name, char_hook, #option),</template>
		<template name="evt_connect_OnKeyDown">#class:connect($name, key_down, #option),</template>
		<template name="evt_connect_OnKeyUp">#class:connect($name, key_up, #option),</template>

		<!-- wxMouseEvent -->
		<template name="evt_connect_OnEnterWindow">#class:connect($name, enter_window, #option),</template>
		<template name="evt_connect_OnLeaveWindow">#class:connect($name, leave_window, #option),</template>
		<template name="evt_connect_OnLeftDClick">#class:connect($name, left_dclick, #option),</template>
		<template name="evt_connect_OnLeftDown">#class:connect($name, left_down, #option),</template>
		<template name="evt_connect_OnLeftUp">#class:connect($name, left_up, #option),</template>
		<template name="evt_connect_OnMiddleDClick">#class:connect($name, middle_dclick, #option),</template>
		<template name="evt_connect_OnMiddleDown">#class:connect($name, middle_down, #option),</template>
		<template name="evt_connect_OnMiddleUp">#class:connect($name, middle_up, #option),</template>
		<template name="evt_connect_OnRightDClick">#class:connect($name, right_dclick, #option),</template>
		<template name="evt_connect_OnRightDown">#class:connect($name, right_down, #option),</template>
		<template name="evt_connect_OnRightUp">#class:connect($name, right_up, #option),</template>
		<template name="evt_connect_OnAux1DClick">%%  event #class:wxEVT_AUX1_DCLICK isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnAux1Down">%%  event #class:wxEVT_AUX1_DOWN isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnAux1Up">%%  event #class:wxEVT_AUX1_UP isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnAux2DClick">%%  event #class:wxEVT_AUX2_DCLICK isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnAux2Down">%%  event #class:wxEVT_AUX2_DOWN isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnAux2Up">%%  event #class:wxEVT_AUX2_UP isn't currently supported by wx in Erlang</template>
		<template name="evt_connect_OnMotion">#class:connect($name, motion, #option),</template>
		<template name="evt_connect_OnMouseWheel">#class:connect($name, mousewheel, #option),</template>
		<template name="evt_connect_OnMouseEvents">
			#class:connect($name, left_down, #option), #nl
			#class:connect($name, left_up, #option), #nl
			#class:connect($name, middle_down, #option), #nl
			#class:connect($name, middle_up, #option), #nl
			#class:connect($name, right_down, #option), #nl
			#class:connect($name, right_up, #option), #nl
			%%  event #class:wxEVT_AUX1_DOWN isn't currently supported by wx in Erlang #nl
			%%  event #class:wxEVT_AUX1_UP isn't currently supported by wx in Erlang #nl
			%%  event #class:wxEVT_AUX2_DOWN isn't currently supported by wx in Erlang #nl
			%%  event #class:wxEVT_AUX1_UP isn't currently supported by wx in Erlang #nl
			#class:connect($name, motion, #option), #nl
			#class:connect($name, left_dclick, #option), #nl
			#class:connect($name, middle_dclick, #option), #nl
			#class:connect($name, right_dclick, #option), #nl
			%%  event #class:wxEVT_AUX1_DCLICK isn't currently supported by wx in Erlang #nl
			%%  event #class:wxEVT_AUX2_DCLICK isn't currently supported by wx in Erlang #nl
			#class:connect($name, leave_window, #option), #nl
			#class:connect($name, enter_window, #option), #nl
			#class:connect($name, mousewheel, #option),
		</template>

		<!-- wxFocusEvent -->
		<template name="evt_connect_OnKillFocus">#class:connect($name, kill_focus, #option),</template>
		<template name="evt_connect_OnSetFocus">#class:connect($name, set_focus , #option),</template>

		<!-- wxPaintEvent -->
		<template name="evt_connect_OnPaint">#class:connect($name, paint, #option),</template>

		<!-- wxEraseEvent -->
		<template name="evt_connect_OnEraseBackground">#class:connect($name, erase_background, #option),</template>

		<!-- wxSizeEvent -->
		<template name="evt_connect_OnSize">#class:connect($name, size, #option),</template>

		<!-- wxMoveEvent -->
		<template name="evt_connect_OnMove">#class:connect($name, move, #option),</template>

		<!-- wxUpdateUIEvent -->
		<template name="evt_connect_OnUpdateUI">#class:connect($name, update_ui, #option),</template>
    </templates>

	<templates class="AUI">
		<template name="settings">
			#ifparenttypeequal "form"
			@{
			#ifequal #parent $aui_managed "1"
			@{
			#iftypenotequal "toolbar"
			@{
				m_mgr.AddPane( $name, wxAuiPaneInfo()
				#ifnotnull $aui_name @{.Name( $aui_name )@}.$docking()
				#ifnotnull $caption @{.Caption( $caption )@}
				#ifequal $caption_visible "0" @{.CaptionVisible( $caption_visible )@}
				#ifequal $close_button "0" @{.CloseButton( $close_button )@}
				#ifequal $maximize_button "1" @{.MaximizeButton( $maximize_button )@}
				#ifequal $minimize_button "1" @{.MinimizeButton( $minimize_button )@}
				#ifequal $pin_button "1" @{.PinButton( $pin_button )@}
				#ifequal $pane_border "0" @{.PaneBorder( $pane_border )@}
				#ifequal $gripper "1" @{.Gripper()@}
				#ifequal $show "0" @{.Hide()@}
				#ifequal $moveable "0" @{.Movable( $moveable )@}
				#ifnotnull $dock @{.$dock()#ifequal $dock "Float" @{.FloatingPosition( $pane_position )@}@}
				#ifnotnull $resize @{.$resize()#ifequal $resize "Resizable" @{.FloatingSize( $pane_size )@}@}
				#ifequal $dock_fixed "1" @{.DockFixed( $dock_fixed )@}
				#ifequal $BottomDockable "0" @{.BottomDockable( $BottomDockable )@}
				#ifequal $TopDockable "0" @{.TopDockable( $TopDockable )@}
				#ifequal $LeftDockable "0" @{.LeftDockable( $LeftDockable )@}
				#ifequal $RightDockable "0" @{.RightDockable( $RightDockable )@}
				#ifequal $floatable "0"	@{.Floatable( $floatable )@}
				#ifnotnull $aui_row	@{.Row( $aui_row )@}
				#ifnotnull $aui_position @{.Position( $aui_position )@}
				#ifnotnull $best_size @{.BestSize( $best_size )@}
				#ifnotnull $min_size @{.MinSize( $min_size )@}
				#ifnotnull $max_size @{.MaxSize( $max_size )@}
				#ifnotnull $aui_layer @{.Layer( $aui_layer )@}
				#ifequal $center_pane "1" @{.CentrePane()@}
				#ifequal $default_pane "1" @{.DefaultPane()@}
				#ifequal $toolbar_pane "1" @{.ToolbarPane()@}
				); #nl
			@}
			@}
			@}
		</template>
	</templates>

	<templates class="wxTreeCtrlBase">
		<template name="evt_connect_OnTreeBeginDrag">#class:connect($name, command_tree_begin_drag, #option),</template>
		<template name="evt_connect_OnTreeBeginRDrag">#class:connect($name, command_tree_begin_rdrag, #option),</template>
		<template name="evt_connect_OnTreeEndDrag">#class:connect($name, command_tree_end_drag, #option),</template>
		<template name="evt_connect_OnTreeBeginLabelEdit">#class:connect($name, command_tree_begin_label_edit, #option),</template>
		<template name="evt_connect_OnTreeEndLabelEdit">#class:connect($name, command_tree_end_label_edit, #option),</template>
		<template name="evt_connect_OnTreeDeleteItem">#class:connect($name, command_tree_delete_ite, #option),</template>
		<template name="evt_connect_OnTreeItemActivated">#class:connect($name, command_tree_item_activated, #option),</template>
		<template name="evt_connect_OnTreeItemCollapsed">#class:connect($name, command_tree_item_collapsed, #option),</template>
		<template name="evt_connect_OnTreeItemCollapsing">#class:connect($name, command_tree_item_collapsing, #option),</template>
		<template name="evt_connect_OnTreeItemExpanded">#class:connect($name, command_tree_item_expanded, #option),</template>
		<template name="evt_connect_OnTreeItemExpanding">#class:connect($name, command_tree_item_expanding, #option),</template>
		<template name="evt_connect_OnTreeItemRightClick">#class:connect($name, command_tree_item_right_click, #option),</template>
		<template name="evt_connect_OnTreeItemMiddleClick">#class:connect($name, command_tree_item_middle_click, #option),</template>
		<template name="evt_connect_OnTreeSelChanged">#class:connect($name, command_tree_sel_changed, #option),</template>
		<template name="evt_connect_OnTreeSelChanging">#class:connect($name, command_tree_sel_changing, #option),</template>
		<template name="evt_connect_OnTreeKeyDown">#class:connect($name, command_tree_key_down, #option),</template>
		<template name="evt_connect_OnTreeItemMenu">#class:connect($name, command_tree_item_menu, #option),</template>
	</templates>

	<templates class="wxAnyButton">
		<template name="settings">
			#ifequal $markup "1" @{ $name->SetLabelMarkup( $label ); @}
			#ifnotnull $bitmap @{ #nl $name->SetBitmap( $bitmap ); @}
			#ifnotnull $disabled @{ #nl $name->SetBitmapDisabled( $disabled ); @}
			#ifnotnull $pressed @{ #nl $name->SetBitmapPressed( $pressed ); @}
			#ifnotnull $focus @{ #nl $name->SetBitmapFocus( $focus ); @}
			#ifnotnull $current @{ #nl $name->SetBitmapCurrent( $current ); @}
			#ifnotnull $position @{ #nl $name->SetBitmapPosition( $position ); @}
			#ifnotnull $margins @{ #nl $name->SetBitmapMargins( $margins ); @}
		</template>
	</templates>

	<templates class="UserClasses">
		<template name="header_comment">
			/** #nl
			@@file #nl
			Subclass of $basename, which is generated by wxFormBuilder. #nl
			*/
		</template>
		<template name="event_handler_comment">
			// Handlers for $basename events.
		</template>
		<template name="header_include">@#include &quot;$gen_file.h&quot;</template>
		<template name="source_include">
			#ifnotnull $precompiled_header
			@{
				$precompiled_header #nl
			@}
			@#include &quot;$file.h&quot;
		</template>
		<template name="class_decl">
			/** Implementing $basename */ #nl
			class $name : public $basename
		</template>
		<template name="guard_macro_open">
			@#ifndef __$file #append __ #nl
			@#define __$file #append __
		</template>
		<template name="guard_macro_close">@#endif // __$file #append __</template>
		<template name="Frame_cons_decl">
			/** Constructor */ #nl
			$name( wxWindow* parent );
		</template>
		<template name="Frame_cons_def">
			$name::$name( wxWindow* parent ) #nl #append : #nl$basename( parent )
		</template>
		<template name="Panel_cons_decl">
			/** Constructor */ #nl
			$name( wxWindow* parent );
		</template>
		<template name="Panel_cons_def">
			$name::$name( wxWindow* parent ) #nl #append : #nl$basename( parent )
		</template>
		<template name="Dialog_cons_decl">
			/** Constructor */ #nl
			$name( wxWindow* parent );
		</template>
		<template name="Dialog_cons_def">
			$name::$name( wxWindow* parent ) #nl #append : #nl$basename( parent )
		</template>
		<template name="Wizard_cons_decl">
			/** Constructor */ #nl
			$name( wxWindow* parent );
		</template>
		<template name="Wizard_cons_def">
			$name::$name( wxWindow* parent ) #nl #append : #nl$basename( parent )
		</template>
	</templates>
</codegen>
