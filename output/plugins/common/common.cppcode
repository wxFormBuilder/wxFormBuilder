<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<codegen language="C++">

	<templates class="wxButton">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $label, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="settings">
			#ifnotequal $default "0" @{ #nl $name->SetDefault(); @}
			#ifnotequal $auth_needed "0" @{ #nl $name->SetAuthNeeded(); @}
		</template>
		<template name="include">@#include &lt;wx/button.h&gt;</template>
		<template name="evt_entry_OnButtonClick">EVT_BUTTON( $id, #handler )</template>
		<template name="evt_connect_OnButtonClick">$name->Connect( wxEVT_COMMAND_BUTTON_CLICKED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxBitmapButton">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, wxNullBitmap, $pos, $size, wxBU_AUTODRAW|$style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="include">@#include &lt;wx/bmpbuttn.h&gt;</template>
	</templates>

	<templates class="wxTextCtrl">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/textctrl.h&gt;
								#nl @#include &lt;wx/dnd.h&gt;
		</template>
		<template name="userdriveclass">#ifnotequal $IsDropFile "0" @{
		 class drive_$name : public wxFileDropTarget #nl
{ #nl 
private: #nl
    wxTextCtrl* m_text; #nl
public: #nl
    drive_$name(wxTextCtrl* text){}; #nl
    virtual bool OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames){}; #nl
    ~drive_$name(); #nl
};
		 @}
			</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $value, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="settings">
		#ifnotnull $maxlength
		@{
			#ifnotequal $maxlength "0"
			@{
				@#ifdef __WXGTK__#nl
					if ( !$name->HasFlag( wxTE_MULTILINE ) )#nl
					{#nl
						$name->SetMaxLength( $maxlength );#nl
					}#nl
				@#else#nl
					$name->SetMaxLength( $maxlength );#nl
				@#endif
			@}
		@}
		#ifnotequal $IsDropFile "0" @{ #nl $name->SetDropTarget(new drive_$name($name)); @}
		</template>
		<template name="evt_entry_OnText">EVT_TEXT( $id, #handler )</template>
		<template name="evt_connect_OnText">$name->Connect( wxEVT_COMMAND_TEXT_UPDATED, #handler, NULL, this );</template>
		<template name="evt_entry_OnTextEnter">EVT_TEXT_ENTER( $id, #handler )</template>
		<template name="evt_connect_OnTextEnter">$name->Connect( wxEVT_COMMAND_TEXT_ENTER, #handler, NULL, this );</template>
		<template name="evt_entry_OnTextURL">EVT_TEXT_URL( $id, #handler )</template>
		<template name="evt_connect_OnTextURL">$name->Connect( wxEVT_COMMAND_TEXT_URL, #handler, NULL, this );</template>
		<template name="evt_entry_OnTextMaxLen">EVT_TEXT_MAXLEN( $id, #handler )</template>
		<template name="evt_connect_OnTextMaxLen">$name->Connect( wxEVT_COMMAND_TEXT_MAXLEN, #handler, NULL, this );</template>
	</templates>

	<templates class="wxStaticText">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/stattext.h&gt;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $label, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @} );</template>
		<template name="settings">
			#ifequal $markup "1"
			@{ $name->SetLabelMarkup( $label ); #nl @}

			$name->Wrap( $wrap );
		</template>
	</templates>

	<templates class="wxCheckBox">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/checkbox.h&gt;</template>
		<template name="construction">
			$name = new #class( #wxparent $name, $id, $label, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
		</template>
		<template name="settings">#ifnotequal $checked "0" @{ $name->SetValue(true); @}</template>
		<template name="evt_entry_OnCheckBox">EVT_CHECKBOX( $id, #handler )</template>
		<template name="evt_connect_OnCheckBox">$name->Connect( wxEVT_COMMAND_CHECKBOX_CLICKED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxComboBox">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/combobox.h&gt;</template>
		<template name="construction">
			$name = new #class( #wxparent $name, $id, $value, $pos, $size, 0, NULL, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
			#foreach $choices
			@{ $name->Append( #pred ); @}
		</template>
		<template name="settings">#ifnotequal $selection "-1" @{$name->SetSelection( $selection );@}</template>
		<template name="evt_entry_OnCombobox">EVT_COMBOBOX( $id, #handler )</template>
		<template name="evt_connect_OnCombobox">$name->Connect( wxEVT_COMMAND_COMBOBOX_SELECTED, #handler, NULL, this );</template>
		<template name="evt_entry_OnText">EVT_TEXT( $id, #handler )</template>
		<template name="evt_connect_OnText">$name->Connect( wxEVT_COMMAND_TEXT_UPDATED, #handler, NULL, this );</template>
		<template name="evt_entry_OnTextEnter">EVT_TEXT_ENTER( $id, #handler )</template>
		<template name="evt_connect_OnTextEnter">$name->Connect( wxEVT_COMMAND_TEXT_ENTER, #handler, NULL, this );</template>
		<template name="evt_entry_OnComboboxDropdown">EVT_COMBOBOX_DROPDOWN( $id, #handler )</template>
		<template name="evt_connect_OnComboboxDropdown">$name->Connect( wxEVT_COMBOBOX_DROPDOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnComboboxCloseup">EVT_COMBOBOX_CLOSEUP( $id, #handler )</template>
		<template name="evt_connect_OnComboboxCloseup">$name->Connect( wxEVT_COMBOBOX_CLOSEUP, #handler, NULL, this );</template>
	</templates>

	<templates class="wxBitmapComboBox">
		<template name="declaration">#class* $name;</template>
		<template name="construction">
			$name = new #class( #wxparent $name, $id, $value, $pos, $size, 0, NULL, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name 			@{, wxDefaultValidator, $window_name @} );

			#foreach $choices
			@{ $name->Append( wxString(#pred).AfterFirst(wxChar(58)), wxBitmap(wxImage(wxString(#pred).BeforeFirst(wxChar(58))))); @}
		</template>
		<template name="settings">#ifnotequal $selection "-1" @{$name->SetSelection( $selection );@}</template>
		<template name="evt_entry_OnCombobox">EVT_COMBOBOX( $id, #handler )</template>
		<template name="evt_connect_OnCombobox">$name->Connect( wxEVT_COMMAND_COMBOBOX_SELECTED, #handler, NULL, this );</template>
		<template name="evt_entry_OnText">EVT_TEXT( $id, #handler )</template>
		<template name="evt_connect_OnText">$name->Connect( wxEVT_COMMAND_TEXT_UPDATED, #handler, NULL, this );</template>
		<template name="evt_entry_OnTextEnter">EVT_TEXT_ENTER( $id, #handler )</template>
		<template name="evt_connect_OnTextEnter">$name->Connect( wxEVT_COMMAND_TEXT_ENTER, #handler, NULL, this );</template>
		<template name="include">@#include &lt;wx/bmpcbox.h&gt;</template>
	</templates>

	<templates class="wxListBox">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/listbox.h&gt;</template>
		<template name="construction">
			$name = new #class( #wxparent $name, $id, $pos, $size, 0, NULL, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
			#foreach $choices
			@{ $name->Append( #pred ); @}
		</template>
		<template name="evt_entry_OnListBox">EVT_LISTBOX( $id, #handler )</template>
		<template name="evt_connect_OnListBox">$name->Connect( wxEVT_COMMAND_LISTBOX_SELECTED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListBoxDClick">EVT_LISTBOX_DCLICK( $id, #handler )</template>
		<template name="evt_connect_OnListBoxDClick">$name->Connect( wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxRadioBox">
		<template name="declaration">#class* $name;</template>
		<template name="include">@#include &lt;wx/radiobox.h&gt;</template>
		<template name="construction">
			#ifnotnull $choices
			@{
				wxString $name #append Choices[] = { $choices }; #nl
				int $name #append NChoices = sizeof( $name #append Choices ) / sizeof( wxString ); #nl
				$name = new #class( #wxparent $name, $id, $label, $pos, $size, $name #append NChoices, $name #append Choices, $majorDimension, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} ); #nl
				$name->SetSelection( $selection );
			@}
			#ifnull $choices
			@{
				wxArrayString $name #append Choices; #nl
				$name = new #class( #wxparent $name, $id, $pos, $size, $name #append Choices, $majorDimension, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
			@}
		</template>
		<template name="evt_entry_OnRadioBox">EVT_RADIOBOX( $id, #handler )</template>
		<template name="evt_connect_OnRadioBox">$name->Connect( wxEVT_COMMAND_RADIOBOX_SELECTED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxRadioButton">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $label, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="settings">
			#ifnotequal $value "0"
			@{ $name->SetValue( true ); @}
		</template>
		<template name="include">@#include &lt;wx/radiobut.h&gt;</template>
		<template name="evt_entry_OnRadioButton">EVT_RADIOBUTTON( $id, #handler )</template>
		<template name="evt_connect_OnRadioButton">$name->Connect( wxEVT_COMMAND_RADIOBUTTON_SELECTED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxStaticBitmap">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $bitmap, $pos, $size, $window_style #ifnotnull $window_name @{, $window_name @} );</template>
		<template name="include">@#include &lt;wx/statbmp.h&gt;</template>
	</templates>

	<templates class="wxAnimationCtrl">
		<template name="declaration">#class* $name;</template>
		<template name="construction">
			$name = new #class( #wxparent $name, $id, wxNullAnimation, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @} );
			#ifnotnull $animation
			@{ #nl $name->LoadFile( $animation ); @}
		</template>
		<template name="settings">
			#ifnotnull $inactive_bitmap
			@{ #nl $name->SetInactiveBitmap( $inactive_bitmap ); @}
			#ifequal $play "1"
			@{ #nl $name->Play(); @}
		</template>
		<template name="include">@#include &lt;wx/animate.h&gt;</template>
	</templates>

	<templates class="wxStaticLine">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @} );</template>
		<template name="include">@#include &lt;wx/statline.h&gt;</template>
	</templates>

	<templates class="wxListCtrl">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="include">@#include &lt;wx/listctrl.h&gt;</template>
		<template name="evt_entry_OnListBeginDrag">EVT_LIST_BEGIN_DRAG( $id, #handler )</template>
		<template name="evt_connect_OnListBeginDrag">$name->Connect( wxEVT_COMMAND_LIST_BEGIN_DRAG, #handler, NULL, this );</template>
		<template name="evt_entry_OnListBeginRDrag">EVT_LIST_BEGIN_RDRAG( $id, #handler )</template>
		<template name="evt_connect_OnListBeginRDrag">$name->Connect( wxEVT_COMMAND_LIST_BEGIN_RDRAG, #handler, NULL, this );</template>
		<template name="evt_entry_OnListBeginLabelEdit">EVT_LIST_BEGIN_LABEL_EDIT( $id, #handler )</template>
		<template name="evt_connect_OnListBeginLabelEdit">$name->Connect( wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT, #handler, NULL, this );</template>
		<template name="evt_entry_OnListEndLabelEdit">EVT_LIST_END_LABEL_EDIT( $id, #handler )</template>
		<template name="evt_connect_OnListEndLabelEdit">$name->Connect( wxEVT_COMMAND_LIST_END_LABEL_EDIT, #handler, NULL, this );</template>
		<template name="evt_entry_OnListDeleteItem">EVT_LIST_DELETE_ITEM( $id, #handler )</template>
		<template name="evt_connect_OnListDeleteItem">$name->Connect( wxEVT_COMMAND_LIST_DELETE_ITEM, #handler, NULL, this );</template>
		<template name="evt_entry_OnListDeleteAllItems">EVT_LIST_DELETE_ALL_ITEMS( $id, #handler )</template>
		<template name="evt_connect_OnListDeleteAllItems">$name->Connect( wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemSelected">EVT_LIST_ITEM_SELECTED( $id, #handler )</template>
		<template name="evt_connect_OnListItemSelected">$name->Connect( wxEVT_COMMAND_LIST_ITEM_SELECTED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemDeselected">EVT_LIST_ITEM_DESELECTED( $id, #handler )</template>
		<template name="evt_connect_OnListItemDeselected">$name->Connect( wxEVT_COMMAND_LIST_ITEM_DESELECTED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemActivated">EVT_LIST_ITEM_ACTIVATED( $id, #handler )</template>
		<template name="evt_connect_OnListItemActivated">$name->Connect( wxEVT_COMMAND_LIST_ITEM_ACTIVATED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemFocused">EVT_LIST_ITEM_FOCUSED( $id, #handler )</template>
		<template name="evt_connect_OnListItemFocused">$name->Connect( wxEVT_COMMAND_LIST_ITEM_FOCUSED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemMiddleClick">EVT_LIST_ITEM_MIDDLE_CLICK( $id, #handler )</template>
		<template name="evt_connect_OnListItemMiddleClick">$name->Connect( wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemRightClick">EVT_LIST_ITEM_RIGHT_CLICK( $id, #handler )</template>
		<template name="evt_connect_OnListItemRightClick">$name->Connect( wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK, #handler, NULL, this );</template>
		<template name="evt_entry_OnListKeyDown">EVT_LIST_KEY_DOWN( $id, #handler )</template>
		<template name="evt_connect_OnListKeyDown">$name->Connect( wxEVT_COMMAND_LIST_KEY_DOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnListInsertItem">EVT_LIST_INSERT_ITEM( $id, #handler )</template>
		<template name="evt_connect_OnListInsertItem">$name->Connect( wxEVT_COMMAND_LIST_INSERT_ITEM, #handler, NULL, this );</template>
		<template name="evt_entry_OnListColClick">EVT_LIST_COL_CLICK( $id, #handler )</template>
		<template name="evt_connect_OnListColClick">$name->Connect( wxEVT_COMMAND_LIST_COL_CLICK, #handler, NULL, this );</template>
		<template name="evt_entry_OnListColRightClick">EVT_LIST_COL_RIGHT_CLICK( $id, #handler )</template>
		<template name="evt_connect_OnListColRightClick">$name->Connect( wxEVT_COMMAND_LIST_COL_RIGHT_CLICK, #handler, NULL, this );</template>
		<template name="evt_entry_OnListColBeginDrag">EVT_LIST_COL_BEGIN_DRAG( $id, #handler )</template>
		<template name="evt_connect_OnListColBeginDrag">$name->Connect( wxEVT_COMMAND_LIST_COL_BEGIN_DRAG, #handler, NULL, this );</template>
		<template name="evt_entry_OnListColDragging">EVT_LIST_COL_DRAGGING( $id, #handler )</template>
		<template name="evt_connect_OnListColDragging">$name->Connect( wxEVT_COMMAND_LIST_COL_DRAGGING, #handler, NULL, this );</template>
		<template name="evt_entry_OnListColEndDrag">EVT_LIST_COL_END_DRAG( $id, #handler )</template>
		<template name="evt_connect_OnListColEndDrag">$name->Connect( wxEVT_COMMAND_LIST_COL_END_DRAG, #handler, NULL, this );</template>
		<template name="evt_entry_OnListCacheHint">EVT_LIST_CACHE_HINT( $id, #handler )</template>
		<template name="evt_connect_OnListCacheHint">$name->Connect( wxEVT_COMMAND_LIST_CACHE_HINT, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemChecked">EVT_LIST_ITEM_CHECKED( $id, #handler )</template>
		<template name="evt_connect_OnListItemChecked">$name->Connect( wxEVT_COMMAND_LIST_ITEM_CHECKED, #handler, NULL, this );</template>
		<template name="evt_entry_OnListItemUnchecked">EVT_LIST_ITEM_UNCHECKED( $id, #handler )</template>
		<template name="evt_connect_OnListItemUnchecked">$name->Connect( wxEVT_COMMAND_LIST_ITEM_UNCHECKED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxChoice">
		<template name="declaration">#class* $name;</template>
		<template name="construction">
			#ifnotnull $choices
			@{
				wxString $name #append Choices[] = { $choices }; #nl
				int $name #append NChoices = sizeof( $name #append Choices ) / sizeof( wxString ); #nl
				$name = new #class( #wxparent $name, $id, $pos, $size, $name #append NChoices, $name #append Choices, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
			@}
			#ifnull $choices
			@{
				wxArrayString $name #append Choices; #nl
				$name = new #class( #wxparent $name, $id, $pos, $size, $name #append Choices, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );
			@}
		</template>
		<template name="include">@#include &lt;wx/choice.h&gt;</template>
		<template name="settings">$name->SetSelection( $selection );</template>
		<template name="evt_entry_OnChoice">EVT_CHOICE( $id, #handler )</template>
		<template name="evt_connect_OnChoice">$name->Connect( wxEVT_COMMAND_CHOICE_SELECTED, #handler, NULL, this );</template>
	</templates>

	<templates class="wxGauge">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $range, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="settings">
			#ifnotnull $value
			@{ $name->SetValue( $value ); @}
		</template>
		<template name="include">@#include &lt;wx/gauge.h&gt;</template>
	</templates>

	<templates class="wxSlider">
		<template name="declaration">#class* $name;</template>
		<template name="construction">$name = new #class( #wxparent $name, $id, $value, $minValue, $maxValue, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wxDefaultValidator, $window_name @} );</template>
		<template name="include">@#include &lt;wx/slider.h&gt;</template>
		<template name="evt_entry_OnScroll">EVT_SCROLL( #handler )</template>
		<template name="evt_connect_OnScroll">
			$name->Connect( wxEVT_SCROLL_TOP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this );
		</template>
		<template name="evt_entry_OnScrollTop">EVT_SCROLL_TOP( #handler )</template>
		<template name="evt_connect_OnScrollTop">$name->Connect( wxEVT_SCROLL_TOP, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollBottom">EVT_SCROLL_BOTTOM( #handler )</template>
		<template name="evt_connect_OnScrollBottom">$name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollLineUp">EVT_SCROLL_LINEUP( #handler )</template>
		<template name="evt_connect_OnScrollLineUp">$name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollLineDown">EVT_SCROLL_LINEDOWN( #handler )</template>
		<template name="evt_connect_OnScrollLineDown">$name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollPageUp">EVT_SCROLL_PAGEUP( #handler )</template>
		<template name="evt_connect_OnScrollPageUp">$name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollPageDown">EVT_SCROLL_PAGEDOWN( #handler )</template>
		<template name="evt_connect_OnScrollPageDown">$name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollThumbTrack">EVT_SCROLL_THUMBTRACK( #handler )</template>
		<template name="evt_connect_OnScrollThumbTrack">$name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollThumbRelease">EVT_SCROLL_THUMBRELEASE( #handler )</template>
		<template name="evt_connect_OnScrollThumbRelease">$name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this );</template>
		<template name="evt_entry_OnScrollChanged">EVT_SCROLL_CHANGED( #handler )</template>
		<template name="evt_connect_OnScrollChanged">$name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScroll">EVT_COMMAND_SCROLL( $id, #handler )</template>
		<template name="evt_connect_OnCommandScroll">
			$name->Connect( wxEVT_SCROLL_TOP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this ); #nl
			$name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this );
		</template>
		<template name="evt_entry_OnCommandScrollTop">EVT_COMMAND_SCROLL_TOP( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollTop">$name->Connect( wxEVT_SCROLL_TOP, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollBottom">EVT_COMMAND_SCROLL_BOTTOM( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollBottom">$name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollLineUp">EVT_COMMAND_SCROLL_LINEUP( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollLineUp">$name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollLineDown">EVT_COMMAND_SCROLL_LINEDOWN( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollLineDown">$name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollPageUp">EVT_COMMAND_SCROLL_PAGEUP( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollPageUp">$name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollPageDown">EVT_COMMAND_SCROLL_PAGEDOWN( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollPageDown">$name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollThumbTrack">EVT_COMMAND_SCROLL_THUMBTRACK( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollThumbTrack">$name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollThumbRelease">EVT_COMMAND_SCROLL_THUMBRELEASE( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollThumbRelease">$name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this );</template>
		<template name="evt_entry_OnCommandScrollChanged">EVT_COMMAND_SCROLL_CHANGED( $id, #handler )</template>
		<template name="evt_connect_OnCommandScrollChanged">$name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this );</template>
		<template name="evt_entry_OnSlider">EVT_SLIDER( $id, #handler )</template>
		<template name="evt_connect_OnSlider">$name->Connect( wxEVT_SLIDER, #handler, NULL, this );</template>
	</templates>

</codegen>
