<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<package name="Common" lib="common" icon="button16x16.xpm" desc="wxWidgets common controls">

  <objectinfo class="wxButton" icon="button.xpm" type="widget">
    <inherits class="wxAnyButton"/>
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_button</property>
    <property name="style" type="bitlist">
      <option name="wxBU_LEFT" help="Left-justifies the label. Windows and GTK+ only."/>
      <option name="wxBU_TOP" help="Aligns the label to the top of the button. Windows and GTK+ only."/>
      <option name="wxBU_RIGHT" help="Right-justifies the bitmap label. Windows and GTK+ only."/>
      <option name="wxBU_BOTTOM" help="Aligns the label to the bottom of the button. Windows and GTK+ only."/>
      <option name="wxBU_EXACTFIT" help="By default, all buttons are made of at least the standard button size, even if their contents is small enough to fit into a smaller size. This is done for consistency as most platforms use buttons of the same size in the native dialogs, but can be overridden by specifying this flag. If it is given, the button will be made just big enough for its contents. Notice that under MSW the button will still have at least the standard height, even with this style, if it has a non-empty label."/>
      <option name="wxBU_NOTEXT" help="Disables the display of the text label in the button even if it has one or its id is one of the standard stock ids with an associated label: without using this style a button which is only supposed to show a bitmap but uses a standard id would display a label too."/>
      <option name="wxBORDER_NONE" help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports but in the latter only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)."/>
    </property>
    <property name="default" type="bool">0</property>
    <property name="auth_needed" type="bool" help="Sets whether an authentication needed symbol should be displayed on the button. This method doesn't do anything if the platform is not Windows Vista or newer.">0</property>
    <event name="OnButtonClick" class="wxCommandEvent" help="Process a wxEVT_COMMAND_BUTTON_CLICKED event, when the button is clicked"/>
  </objectinfo>

  <objectinfo class="wxBitmapButton" icon="bitmap_button.xpm" type="widget">
    <inherits class="wxButton">
      <property name="name">m_bpButton</property>
    </inherits>
    <property name="style" type="bitlist">
      <option name="wxBU_LEFT" help="Left-justifies the bitmap label."/>
      <option name="wxBU_TOP" help="Aligns the bitmap label to the top of the button."/>
      <option name="wxBU_RIGHT" help="Right-justifies the bitmap label."/>
      <option name="wxBU_BOTTOM" help="Aligns the bitmap label to the bottom of the button."/>
      <option name="wxBORDER_NONE" help="Creates a button without border. This is currently implemented in MSW, GTK2 and OSX/Cocoa and OSX/Carbon ports but in the latter only applies to buttons with bitmaps and using bitmap of one of the standard sizes only, namely 128*128, 48*48, 24*24 or 16*16. In all the other cases wxBORDER_NONE is ignored under OSX/Carbon (these restrictions don't exist in OSX/Cocoa however)."/>
    </property>
  </objectinfo>

  <objectinfo class="wxStaticText" icon="static_text.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <property name="name" type="text">m_staticText</property>
    <property name="style" type="bitlist">
      <option name="wxALIGN_LEFT" help="Align the text to the left."/>
      <option name="wxALIGN_RIGHT" help="Align the text to the right."/>
      <option name="wxALIGN_CENTER_HORIZONTAL" help="Center the text (horizontally)."/>
      <option name="wxST_NO_AUTORESIZE" help="By default, the control will adjust its size to exactly fit to the size of the text when SetLabel() is called. If this style flag is given, the control will not change its size (this style is especially useful with controls which also have the wxALIGN_RIGHT or the wxALIGN_CENTER_HORIZONTAL style because otherwise they won't make sense any longer after a call to SetLabel())."/>
      <option name="wxST_ELLIPSIZE_START" help="If the labeltext width exceeds the control width, replace the beginning of the label with an ellipsis; uses wxControl::Ellipsize."/>
      <option name="wxST_ELLIPSIZE_MIDDLE" help="If the label text width exceeds the control width, replace the middle of the label with an ellipsis; uses wxControl::Ellipsize."/>
      <option name="wxST_ELLIPSIZE_END" help="If the label text width exceeds the control width, replace the end of the label with an ellipsis; uses wxControl::Ellipsize."/>
    </property>
    <property name="label" type="wxString_i18n">MyLabel</property>
    <property name="markup" type="bool" help="Simple markup can be used to apply different fonts or colours to different parts of the control label when supported. If markup is not supported by the control or platform, it is simply stripped and SetLabel() is used with the resulting string.&#x0A;Since 2.9.2.">0</property>
    <property name="wrap" type="int" help="Wraps the control's label so that each of its lines becomes at most this many pixels wide if possible (the lines are broken at words boundaries so it might not be the case if words are too long). If width is negative, no wrapping is done.">-1</property>
  </objectinfo>

  <objectinfo class="wxTextCtrl" icon="text_ctrl.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_textCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
      <option name="wxTE_PROCESS_TAB" help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
      <option name="wxTE_MULTILINE" help="The text control allows multiple lines."/>
      <option name="wxTE_PASSWORD" help="The text will be echoed as asterisks."/>
      <option name="wxTE_READONLY" help="The text will not be user-editable."/>
      <option name="wxTE_RICH" help="Use rich text control under Windows, this allows to have more than 64KB of text in the control even under Win9x. This style is ignored under other platforms."/>
      <option name="wxTE_RICH2" help="Use rich text control version 2.0 or 3.0 under Windows, this style is ignored under other platforms."/>
      <option name="wxTE_AUTO_URL" help="Highlight the URLs and generate the wxTextUrlEvents when mouse events occur over them. This style is only supported for wxTE_RICH Win32 and multi-line wxGTK2 text controls."/>
      <option name="wxTE_NOHIDESEL" help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms."/>
      <option name="wxHSCROLL" help="A horizontal scrollbar will be created and used, so that text won't be wrapped. No effect under wxGTK1."/>
      <option name="wxTE_NO_VSCROLL" help="For multiline controls only: vertical scrollbar will never be created. This limits the amount of text which can be entered into the control to what can be displayed in it under MSW but not under GTK2. Currently not implemented for the other platforms."/>
      <option name="wxTE_LEFT" help="The text in the control will be left-justified (default)."/>
      <option name="wxTE_CENTER" help="The text in the control will be centered (currently wxMSW and wxGTK2 only). "/>
      <option name="wxTE_RIGHT" help="The text in the control will be right-justified (currently wxMSW and wxGTK2 only)."/>
      <option name="wxTE_DONTWRAP" help="Same as wxHSCROLL style: don't wrap at all, show horizontal scrollbar instead."/>
      <option name="wxTE_CHARWRAP" help="Wrap the lines too long to be shown entirely at any position (wxUniv and wxGTK2 only)."/>
      <option name="wxTE_WORDWRAP" help="Wrap the lines too long to be shown entirely at word boundaries (wxUniv and wxGTK2 only)."/>
      <option name="wxTE_BESTWRAP" help="Wrap the lines at word boundaries or at any other character if there are words longer than the window width (this is the default)."/>
      <option name="wxTE_CAPITALIZE" help="On PocketPC and Smartphone, causes the first letter to be capitalized."/>
    </property>
    <property name="value" type="wxString_i18n"/>
    <property name="maxlength" type="text" help="The maximum length of user-entered text. 0 means no limit. Note that in wxGTK this function may only be used with single line text controls."/>
    <event name="OnText" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called.)"/>
    <event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)."/>
    <event name="OnTextURL" class="wxTextUrlEvent" help="A mouse event occurred over an URL in the text control (wxMSW and wxGTK2 only)"/>
    <event name="OnTextMaxLen" class="wxCommandEvent" help="User tried to enter more text into the control than the limit set by SetMaxLength."/>
  </objectinfo>

  <objectinfo class="wxStaticBitmap" icon="static_bitmap.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <property name="name" type="text">m_bitmap</property>
    <property name="bitmap" type="bitmap"/>
  </objectinfo>

  <objectinfo class="wxAnimationCtrl" icon="animation.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <property name="name" type="text">m_animCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxAC_DEFAULT_STYLE" help="The default style: wxNO_BORDER."/>
      <option name="wxAC_NO_AUTORESIZE" help="By default, the control will adjust its size to exactly fit to the size of the animation when SetAnimation is called. If this style flag is given, the control will not change its size."/>
      wxAC_DEFAULT_STYLE
    </property>
    <property name="animation" type="file" help="Full file path (only *.gif and *.ani files are supported)."/>
    <property name="inactive_bitmap" type="bitmap"/>
    <property name="play" type="bool">0</property>
  </objectinfo>

  <objectinfo class="wxComboBox" icon="combo_box.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_comboBox</property>
    <property name="value" type="wxString_i18n">Combo!</property>
    <property name="choices" type="stringlist" help="Contents of the Combo Box"></property>
    <property name="selection" type="int" help="Zero-based position of the selected choice.">-1</property>
    <property name="style" type="bitlist">
      <option name="wxCB_SIMPLE" help="Creates a combobox with a permanently displayed list. Windows only."/>
      <option name="wxCB_DROPDOWN" help="Creates a combobox with a drop-down list. MSW and Motif only."/>
      <option name="wxCB_READONLY" help="A combobox with this style behaves like a wxChoice (and may look in the same way as well, although this is platform-dependent), i.e. it allows the user to choose from the list of options but doesn't allow to enter a value not present in the list."/>
      <option name="wxCB_SORT" help="Sorts the entries in the list alphabetically."/>
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
    </property>
    <event name="OnCombobox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_COMBOBOX_SELECTED event, when an item on the list is selected. Note that calling GetValue returns the new value of selection."/>
    <event name="OnText" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_UPDATED event, when the combobox text changes."/>
    <event name="OnTextEnter" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_ENTER event, when <RETURN> is pressed in the combobox."/>
    <event name="OnComboboxDropdown" class="wxCommandEvent" help="Process a wxEVT_COMBOBOX_DROPDOWN event, which is generated when the list box part of the combo box is shown (drops down). Notice that this event is only supported by wxMSW, wxGTK with GTK+ 2.10 or later, and wxOSX/Cocoa."/>
    <event name="OnComboboxCloseup" class="wxCommandEvent" help="Process a wxEVT_COMBOBOX_CLOSEUP event, which is generated when the list box of the combo box disappears (closes up). This event is only generated for the same platforms as wxEVT_COMBOBOX_DROPDOWN above. Also note that only wxMSW and wxOSX/Cocoa support adding or deleting items in this event."/>
  </objectinfo>

  <objectinfo class="wxBitmapComboBox" icon="combo_box.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_bcomboBox</property>
    <property name="value" type="wxString_i18n">Combo!</property>
    <property name="choices" type="stringlist" help="Contents of the Combo Box. Use format bitmap:choice "></property>
    <property name="selection" type="int" help="Zero-based position of the selected choice.">-1</property>
    <property name="style" type="bitlist">
      <option name="wxCB_READONLY" help="Creates a combobox without a text editor. On some platforms the control may appear very different when this style is used."/>
      <option name="wxCB_SORT" help="Sorts the entries in the list alphabetically."/>
      <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls). Windows only."/>
    </property>
    <event name="OnCombobox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_COMBOBOX_SELECTED event, when an item on the list is selected. Note that calling GetValue returns the new value of selection."/>
    <event name="OnText" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_UPDATED event, when the combobox text changes."/>
    <event name="OnTextEnter" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_ENTER event, when <RETURN> is pressed in the combobox."/>
  </objectinfo>

  <objectinfo class="wxChoice" icon="choice.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_choice</property>
    <property name="choices" type="stringlist" help="An array of strings with which to initialise the choice control."/>
    <property name="selection" type="uint" help="Zero-based position of the selected choice.">0</property>
    <property name="style" type="bitlist">
      <option name="wxCB_SORT" help="Sorts the entries in the list alphabetically."/>
    </property>
    <event name="OnChoice" class="wxCommandEvent" help="Process a wxEVT_COMMAND_CHOICE_SELECTED event, when an item on the list is selected."/>
  </objectinfo>

  <objectinfo class="wxListBox" icon="list_box.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_listBox</property>
    <property name="choices" type="stringlist" help="Contents of the List Box."/>
    <property name="style" type="bitlist" help="Note that wxLB_SINGLE, wxLB_MULTIPLE and wxLB_EXTENDED styles are mutually exclusive and you can specify at most one of them (single selection is the default).">
      <option name="wxLB_SINGLE" help="Single-selection list."/>
      <option name="wxLB_MULTIPLE" help="Multiple-selection list: the user can toggle multiple items on and off. This is the same as wxLB_EXTENDED in wxGTK2 port."/>
      <option name="wxLB_EXTENDED" help="Extended-selection list: the user can extend the selection by using SHIFT or CTRL keys together with the cursor movement keys or the mouse."/>
      <option name="wxLB_HSCROLL" help="Create horizontal scrollbar if contents are too wide (Windows only)."/>
      <option name="wxLB_ALWAYS_SB" help="Always show a vertical scrollbar."/>
      <option name="wxLB_NEEDED_SB" help="Only create a vertical scrollbar if needed."/>
      <option name="wxLB_NO_SB" help="Don't create vertical scrollbar (wxMSW only)."/>
      <option name="wxLB_SORT" help="The listbox contents are sorted in alphabetical order."/>
    </property>
    <event name="OnListBox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_SELECTED event, when an item on the list is selected."/>
    <event name="OnListBoxDClick" class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_DOUBLECLICKED event, when the listbox is double-clicked."/>
  </objectinfo>

  <objectinfo class="wxListCtrl" icon="list_ctrl.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_listCtrl</property>
    <property name="style" type="bitlist">
      <option name="wxLC_LIST" help="Multicolumn list view, with optional small icons. Columns are computed automatically, i.e. you don't set columns as in wxLC_REPORT. In other words, the list wraps, unlike a wxListBox."/>
      <option name="wxLC_REPORT" help="Single or multicolumn report view, with optional header."/>
      <option name="wxLC_VIRTUAL" help="The application provides items text on demand. May only be used with wxLC_REPORT."/>
      <option name="wxLC_ICON" help="Large icon view, with optional labels."/>
      <option name="wxLC_SMALL_ICON" help="Small icon view, with optional labels."/>
      <option name="wxLC_ALIGN_TOP" help="Icons align to the top. Win32 default, Win32 only."/>
      <option name="wxLC_ALIGN_LEFT" help="Icons align to the left."/>
      <option name="wxLC_AUTOARRANGE" help="Icons arrange themselves. Win32 only."/>
      <option name="wxLC_EDIT_LABELS" help="Labels are editable: the application will be notified when editing starts."/>
      <option name="wxLC_NO_HEADER" help="No header in report mode."/>
      <option name="wxLC_SINGLE_SEL" help="Single selection (default is multiple)."/>
      <option name="wxLC_SORT_ASCENDING" help="Sort in ascending order. (You must still supply a comparison callback in wxListCtrl::SortItems.)"/>
      <option name="wxLC_SORT_DESCENDING" help="Sort in descending order. (You must still supply a comparison callback in wxListCtrl::SortItems.)"/>
      <option name="wxLC_HRULES" help="Draws light horizontal rules between rows in report mode."/>
      <option name="wxLC_VRULES" help="Draws light vertical rules between columns in report mode."/>
      wxLC_ICON
    </property>
    <event name="OnListBeginDrag" class="wxListEvent" help="Begin dragging with the left mouse button."/>
    <event name="OnListBeginRDrag" class="wxListEvent" help="Begin dragging with the right mouse button."/>
    <event name="OnListBeginLabelEdit" class="wxListEvent" help="Begin editing a label. This can be prevented by calling Veto()."/>
    <event name="OnListEndLabelEdit" class="wxListEvent" help="Finish editing a label. This can be prevented by calling Veto()."/>
    <event name="OnListDeleteItem" class="wxListEvent" help="Delete an item."/>
    <event name="OnListDeleteAllItems" class="wxListEvent" help="Delete all items."/>
    <event name="OnListItemSelected" class="wxListEvent" help="The item has been selected."/>
    <event name="OnListItemDeselected" class="wxListEvent" help="The item has been deselected."/>
    <event name="OnListItemActivated" class="wxListEvent" help="The item has been activated (ENTER or double click)."/>
    <event name="OnListItemFocused" class="wxListEvent" help="The currently focused item has changed."/>
    <event name="OnListItemMiddleClick" class="wxListEvent" help="The middle mouse button has been clicked on an item."/>
    <event name="OnListItemRightClick" class="wxListEvent" help="The right mouse button has been clicked on an item."/>
    <event name="OnListKeyDown" class="wxListEvent" help="A key has been pressed."/>
    <event name="OnListInsertItem" class="wxListEvent" help="An item has been inserted."/>
    <event name="OnListColClick" class="wxListEvent" help="A column (m_col) has been left-clicked."/>
    <event name="OnListColRightClick" class="wxListEvent" help="A column (m_col) has been right-clicked."/>
    <event name="OnListColBeginDrag" class="wxListEvent" help="The user started resizing a column - can be vetoed."/>
    <event name="OnListColDragging" class="wxListEvent" help="The divider between columns is being dragged."/>
    <event name="OnListColEndDrag" class="wxListEvent" help="A column has been resized by the user."/>
    <event name="OnListCacheHint" class="wxListEvent" help="Prepare cache for a virtual list control."/>
    <event name="OnListItemChecked" class="wxListEvent" help="The item has been checked."/>
    <event name="OnListItemUnchecked" class="wxListEvent" help="The item has been unchecked."/>
  </objectinfo>

  <objectinfo class="wxCheckBox" icon="checkbox.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_checkBox</property>
    <property name="label" type="wxString_i18n">Check Me!</property>
    <property name="style" type="bitlist">
      <option name="wxCHK_2STATE" help="Create a 2-state checkbox. This is the default."/>
      <option name="wxCHK_3STATE" help="Create a 3-state checkbox. Not implemented in wxOS2 and wxGTK built against GTK+ 1.2."/>
      <option name="wxCHK_ALLOW_3RD_STATE_FOR_USER" help="By default a user can't set a 3-state checkbox to the third state. It can only be done from code. Using this flags allows the user to set the checkbox to the third state by clicking."/>
      <option name="wxALIGN_RIGHT" help="Makes the text appear on the left of the checkbox."/>
    </property>
    <property name="checked" type="bool">0</property>
    <event name="OnCheckBox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_CHECKBOX_CLICKED event, when the checkbox is clicked."/>
  </objectinfo>

  <objectinfo class="wxRadioBox" icon="radio_box.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_radioBox</property>
    <property name="label" type="wxString_i18n">wxRadioBox</property>
    <property name="choices" type="stringlist" help="Contents of the Radio Box.">&quot;Radio Button&quot;</property>
    <property name="selection" type="uint" help="Zero-based position of the selected button.">0</property>
    <property name="majorDimension" type="uint" help="Specifies the maximum number of rows (if style contains wxRA_SPECIFY_ROWS) or columns (if style contains wxRA_SPECIFY_COLS) for a two-dimensional radiobox.">1</property>
    <property name="style" type="bitlist">
      <option name="wxRA_SPECIFY_ROWS" help="The major dimension parameter refers to the maximum number of rows."/>
      <option name="wxRA_SPECIFY_COLS" help="The major dimension parameter refers to the maximum number of columns."/>
      wxRA_SPECIFY_COLS
    </property>
    <event name="OnRadioBox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RADIOBOX_SELECTED event, when a radiobutton is clicked."/>
  </objectinfo>

  <objectinfo class="wxRadioButton" icon="radio_button.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_radioBtn</property>
    <property name="label" type="wxString_i18n">RadioBtn</property>
    <property name="style" type="bitlist">
      <option name="wxRB_GROUP" help="Marks the beginning of a new group of radio buttons."/>
      <option name="wxRB_SINGLE" help="In some circumstances, radio buttons that are not consecutive siblings trigger a hang bug in Windows (only). If this happens, add this style to mark the button as not belonging to a group, and implement the mutually-exclusive group behaviour yourself."/>
    </property>
    <property name="value" type="bool">0</property>
    <event name="OnRadioButton" class="wxCommandEvent" help="Handles a toggle button click event."/>
  </objectinfo>

  <objectinfo class="wxStaticLine" icon="static_line.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <property name="name" type="text">m_staticline</property>
    <property name="style" type="bitlist">
      <option name="wxLI_HORIZONTAL" help="Creates a horizontal line."/>
      <option name="wxLI_VERTICAL" help="Creates a vertical line."/>
      wxLI_HORIZONTAL
    </property>
  </objectinfo>

  <objectinfo class="wxSlider" icon="slider.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_slider</property>
    <property name="value" type="int" help="Initial position for the slider.">50</property>
    <property name="minValue" type="int" help="Minimum slider position.">0</property>
    <property name="maxValue" type="int" help="Maximum slider position.">100</property>
    <property name="style" type="bitlist">
      <option name="wxSL_HORIZONTAL" help="Displays the slider horizontally (this is the default)."/>
      <option name="wxSL_VERTICAL" help="Displays the slider vertically."/>
      <option name="wxSL_AUTOTICKS" help="Displays tick marks."/>
      <option name="wxSL_MIN_MAX_LABELS" help="Displays minimum, maximum labels (new since wxWidgets 2.9.1)."/>
      <option name="wxSL_VALUE_LABEL" help="Displays value label (new since wxWidgets 2.9.1)."/>
      <option name="wxSL_LABELS" help="Displays minimum, maximum and value labels (same as wxSL_VALUE_LABEL and wxSL_MIN_MAX_LABELS together)."/>
      <option name="wxSL_LEFT" help="Displays ticks on the left and forces the slider to be vertical."/>
      <option name="wxSL_RIGHT" help="Displays ticks on the right and forces the slider to be vertical."/>
      <option name="wxSL_TOP" help="Displays ticks on the top."/>
      <option name="wxSL_BOTTOM" help="Displays ticks on the bottom (this is the default)."/>
      <option name="wxSL_BOTH" help="Displays ticks on both sides."/>
      <option name="wxSL_SELRANGE" help="Allows the user to select a range on the slider. Windows only."/>
      <option name="wxSL_INVERSE" help="Inverses the minimum and maximum endpoints on the slider. Not compatible with wxSL_SELRANGE."/>
      wxSL_HORIZONTAL
    </property>
    <event name="OnScroll" class="wxScrollEvent" help="Process all scroll events."/>
    <event name="OnScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position)."/>
    <event name="OnScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position)."/>
    <event name="OnScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events."/>
    <event name="OnScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events."/>
    <event name="OnScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events."/>
    <event name="OnScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events."/>
    <event name="OnScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack)."/>
    <event name="OnScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events."/>
    <event name="OnScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only)."/>
    <event name="OnCommandScroll" class="wxScrollEvent" help="Process all scroll events. Variant taking a window identifier."/>
    <event name="OnCommandScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position). Variant taking a window identifier."/>
    <event name="OnCommandScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position). Variant taking a window identifier."/>
    <event name="OnCommandScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events. Variant taking a window identifier."/>
    <event name="OnCommandScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events. Variant taking a window identifier."/>
    <event name="OnCommandScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events. Variant taking a window identifier."/>
    <event name="OnCommandScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events. Variant taking a window identifier."/>
    <event name="OnCommandScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack). Variant taking a window identifier."/>
    <event name="OnCommandScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events. Variant taking a window identifier."/>
    <event name="OnCommandScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only). Variant taking a window identifier."/>
    <event name="OnSlider" class="wxCommandEvent" help="Process wxEVT_SLIDER which is generated after any change of wxSlider position in addition to one of the events above. Notice that the handler of this event receives a wxCommandEvent as argument and not wxScrollEvent, as all the other handlers."/>
  </objectinfo>

  <objectinfo class="wxGauge" icon="gauge.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI"/>
    <inherits class="Validator"/>
    <property name="name" type="text">m_gauge</property>
    <property name="range" type="uint" help="Integer range (maximum value) of the gauge.">100</property>
    <property name="value" type="uint" help="Initial position for the gauge.">0</property>
    <property name="style" type="bitlist">
      <option name="wxGA_HORIZONTAL" help="Creates a horizontal gauge. "/>
      <option name="wxGA_VERTICAL" help="Creates a vertical gauge."/>
      <option name="wxGA_SMOOTH" help="Creates smooth progress bar with one pixel wide update step (not supported by all platforms)."/>
      wxGA_HORIZONTAL
    </property>
  </objectinfo>

</package>
