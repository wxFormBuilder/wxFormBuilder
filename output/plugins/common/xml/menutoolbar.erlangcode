<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com

Erlang code generation written by
  Micheus Vieira - micheus@gmail.com
-->
<codegen language="Erlang">

  <templates class="wxWindow">
    <template name="toolbar_add">
      wxToolBar:addControl(#parent $name, $name),
    </template>
  </templates>

  <templates class="wxStatusBar">
    <template name="construction">
      #ifnull $style
      @{
        #ifnotnull $window_style
        @{ #class:new(#parent $name, [{style,$window_style }]), @}
        #ifnull $window_style
        @{ #class:new(#parent $name), @}
      @}
      #ifnotnull $style
      @{ #class:new(#parent $name, [{style,?wxST_SIZEGRIP #ifnotnull $window_style @{| $window_style @}}]), @}
    </template>
  </templates>

  <templates class="wxMenuBar">
    <template name="construction">
      $name = #class:new(#ifnotnull $style @{ $style @}),
    </template>
    <template name="after_addchild">
      wxFrame:setMenuBar(#parent $name, $name),
    </template>
  </templates>

  <templates class="wxMenu">
    <template name="construction">
      $name = #class:new(),
    </template>
    <template name="settings" >
    </template>
    <template name="after_addchild">
      #ifparenttypeequal "menubar"
      @{ wxMenuBar:append(#parent $name, $name, $label), @}

      #ifparenttypeequal "menubar_form"
      @{ wxMenuBar:append(#parent $name, $name, $label), @}

      <!--
        These connect events were transfered to the event templates bock bellow.

        #ifnotnull #parent $context_menu
        @{ #ifequal #parent $context_menu "1"
          @{ #ifparenttypeequal "widget || container || expanded_widget || wizardpagesimple || treelistctrl || dataviewctrl || dataviewtreectrl || dataviewlistctrl || propgrid || propgridman"
            @{ #parent #class:connect($name, right_down, *option), @}
            #ifparenttypeequal "form || wizard"
            @{ #parent #class:connect($name, right_down, *option), @}
            #ifparenttypeequal "tool"
            @{ %% event #class:EVT_AUITOOLBAR_TOOL_DROPDOWN isn't currently supported by Erlang @}
          @}
        @}
      -->
    </template>
    <template name="generated_event_handlers"></template>
    <template name="evt_connect_OnRightDown">
      #ifequal #parent $context_menu "1"
      @{#ifparenttypeequal "widget || container || expanded_widget || wizardpagesimple || treelistctrl || dataviewctrl || dataviewtreectrl || dataviewlistctrl || propgrid || propgridman || form || wizard"
        {@ wxWindow:connect($name, right_down, *option), @}
      @}
    </template>
    <template name="evt_AUIToolbar_Tool_Dropdown">
      #ifequal #parent $context_menu "1"
      @{#ifparenttypeequal "tool"
        {@ %% event #class:EVT_AUITOOLBAR_TOOL_DROPDOWN isn't currently supported by Erlang @}
      @}
    </template>
  </templates>

  <templates class="submenu">
    <template name="construction">
      $name = wxMenu:new(),
    </template>
    <template name="after_addchild">
      wxMenu:append(#parent $name, ?wxID_ANY, $label, $name),
    </template>
  </templates>

  <templates class="wxMenuItem">
    <template name="construction">
      #ifequal $kind "wxITEM_NORMAL"
      @{
        #ifequal $enabled "0"
        @{
          wxMenuItem:enable(wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                                              [#ifnotnull $help
                                                               @{{help,$help }@}]), [{enable,false}]),
        @}
        #ifequal $enabled "1"
        @{
          wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                            [#ifnotnull $help
                                             @{{help,$help }@}]),
        @}
      @}

      #ifnotequal $kind "wxITEM_NORMAL"
      @{
        #ifequal $checked "0"
        @{
          #ifequal $enabled "0"
          @{
            wxMenuItem:enable(wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                                                [{kind,$kind },
                                                                #ifnotnull $help
                                                                @{{help,$help } @}]), [{enable,false}]),
          @}
          #ifequal $enabled "1"
          @{
            wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                              [{kind,$kind },
                                              #ifnotnull $help
                                              @{{help,$help } @}]),
          @}
        @}

        #ifequal $checked "1"
        @{
          #ifequal $enabled "0"
          @{
            $name = wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                                      [{kind,$kind },
                                                      #ifnotnull $help
                                                      @{{help,$help } @}]), #nl
            wxMenuItem:check($name, [{check,true}]), #nl
            wxMenuItem:enable($name, [{enable,false}]),
          @}
          #ifequal $enabled "1"
          @{
            wxMenuItem:check(wxMenu:append(#parent $name, $id, $label #ifnotnull $shortcut @{"\t"$shortcut @},
                                                               [{kind,$kind },
                                                               #ifnotnull $help
                                                               @{{help,$help } @}]), [{check,false}]),
          @}
        @}
      @}
    </template>
    <template name="settings">
      #ifnotnull $bitmap
      @{ #class:setBitmap($name, $bitmap), @}
    </template>
    <template name="evt_connect_OnMenuSelection"> wxMenu:connect(#parent $name, command_menu_selected, *option), </template>
    <template name="evt_connect_OnUpdateUI"> wxMenu:connect(#parent $name, update_ui, *option), </template>
  </templates>

  <templates class="separator">
      <template name="construction">
          wxMenu:appendSeparator(#parent $name),
      </template>
  </templates>

  <templates class="wxToolBar">
  <template name="construction">
    #ifparenttypeequal "form || sizeritem || gbsizeritem"
    @{ $name = wxFrame:createToolBar(#wxparent $name, [{style,$style #ifnotnull $window_style
                                                       @{| $window_style @}}
                                                       #ifnotnull $id
                                                       @{#ifnotequal $id "wxID_ANY"
                                                        @{, {id,$id }@}@}]), @}
  </template>
  <template name="settings">
    #ifnotnull $bitmapsize
    @{ #class:setToolBitmapSize($name, $bitmapsize), @}

    #ifnotnull $separation
    @{ #ifnotequal $separation "5"
      @{ #class:setToolSeparation($name, $separation), @}@}

    #ifnotnull $margins
    @{ #class:setMargins($name, $margins), @}

    #ifnotnull $packing
    @{ #ifnotequal $packing "1"
      @{ #class:setToolPacking($name, $packing), @}@}
  </template>
  <template name="after_addchild">
    #class:realize($name),

    #ifparenttypeequal "form"
    @{#ifequal #parent $aui_managed "1"
      #nl
      $name #append _Pane = ?pi:new(), #nl
      wxAuiManager:addPane(#parent $name #append _AUImgr, $name,
          #nl ?pi:$docking($name #append _Pane),
          #ifnotnull $caption @{ #nl ?pi:caption(*pi, $caption), @}
          #ifequal $caption_visible "0" @{ #nl ?pi:captionVisible(*pi, [{visible,false}]), @}
          #ifequal $close_button "0" @{ #nl ?pi:closeButton(*pi, [{visible,false}]), @}
          #ifequal $maximize_button "1" @{ #nl ?pi:maximizeButton(*pi, [{visible,true}]), @}
          #ifequal $minimize_button "1" @{ #nl ?pi:minimizeButton(*pi, [{visible,true}]), @}
          #ifequal $pin_button "1" @{ #nl ?pi:pinButton(*pi, [{visible,true}]), @}
          #ifequal $pane_border "0" @{ #nl ?pi:paneButton(*pi, [{visible,false}]), @}
          #ifequal $gripper "1" @{ #nl ?pi:gripper(*pi, [{visible,true}]), @}
          #ifequal $show "0" @{ #nl ?pi:hide(*pi), @}
          #ifequal $moveable "1" @{ #nl ?pi:moveable(*pi, [{b,true}]), @}
          #ifequal $dock "Float"
          @{
            #ifnotnull $pane_position @{ #nl ?pi:floatingPosition(*pi, $pane_position), @}
            #nl ?pi:floatable(*pi, [{b,true}]),
          @}
          #ifequal $dock "Dock" @{ #nl ?pi:dock(*pi), @}
          #ifequal $resize "Resizable"
          @{
            #ifnotnull $pane_size @{ #nl ?pi:floatingSize(*pi, $pane_size), @}
            #nl ?pi:resizable(*pi, [{resizable,true}]),
          @}
          #ifequal $resize "Fixed" @{ #nl ?pi:fixed(*pi), @}
          #ifequal $BottomDockable "0" @{ #nl ?pi:bottomDockable(*pi, [{b,false}]), @}
          #ifequal $TopDockable "0" @{ #nl ?pi:topDockable(*pi, [{b,false}]), @}
          #ifequal $LeftDockable "0" @{ #nl ?pi:leftDockable(*pi, [{b,false}]), @}
          #ifequal $RightDockable "0" @{ #nl ?pi:rightDockable(*pi, [{b,false}]), @}
          #ifequal $floatable "0" @{ #nl ?pi:floatable(*pi, [{b,false}]), @}
          #ifnotnull $aui_row	@{ #nl ?pi:row(*pi, $aui_row), @}
          #ifnotnull $aui_position	@{ #nl ?pi:position(*pi, $aui_position), @}
          #ifnotnull $best_size @{ #nl ?pi:bestSize(*pi, $best_size), @}
          #ifnotnull $min_size @{ #nl ?pi:minSize(*pi, $min_size), @}
          #ifnotnull $max_size @{ #nl ?pi:maxSize(*pi, $max_size), @}
          #ifnotnull $aui_layer @{ #nl ?pi:layer(*pi, $aui_layer), @}
          #ifequal $center_pane "1" @{ #nl ?pi:centerPane(*pi), @}
          #ifequal $default_pane "1" @{ #nl ?pi:defaultPane(*pi), @}
          #ifequal $toolbar_pane "1" @{ #nl ?pi:toolbarPane(*pi), @}
    @}
  </template>
  </templates>

  <templates class="wxAuiToolBar">
    <template name="construction">
      <!--
          This class isn't currently supported by Erlang
          when implemented, it should be removed from the
          unsupported list in erlangcg.cpp->ErlangCodeGenerator()
      -->
      $name = wxAuiToolBar:new(#wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style
                                                                         @{| $window_style @}
                                                                         #ifnotnull $window_name
                                                                         @{, wxDefaultValidator, $window_name @}),

      #ifnotnull $bitmapsize
      @{ #class:setToolBitmapSize($name, $bitmapsize), @}

      #ifnotnull $separation
      @{ #ifnotequal $separation "5"
        @{ #class:setToolSeparation($name, $separation), @}@}

      #ifnotnull $margins
      @{ #class:setMargins($name, $margins), @}

      #ifnotnull $packing
      @{ #ifnotequal $packing "1"
        @{ #class:setToolPacking($name, $packing), @}@}
    </template>
    <template name="after_addchild">
      wxAuiToolBar:realize($name),

      #ifparenttypeequal "form"
      @{#ifequal #parent $aui_managed "1"
        @{#nl
          $name #append _Pane = ?pi:new(), #nl
          wxAuiManager:addPane(#parent $name #append _AUImgr, $name,
              #nl ?pi:$docking($name #append _Pane),
              #ifnotnull $caption @{ #nl ?pi:caption(*pi, $caption), @}
              #ifequal $caption_visible "0" @{ #nl ?pi:captionVisible(*pi, [{visible,false}]), @}
              #ifequal $close_button "0" @{ #nl ?pi:closeButton(*pi, [{visible,false}]), @}
              #ifequal $maximize_button "1" @{ #nl ?pi:maximizeButton(*pi, [{visible,true}]), @}
              #ifequal $minimize_button "1" @{ #nl ?pi:minimizeButton(*pi, [{visible,true}]), @}
              #ifequal $pin_button "1" @{ #nl ?pi:pinButton(*pi, [{visible,true}]), @}
              #ifequal $pane_border "0" @{ #nl ?pi:paneButton(*pi, [{visible,false}]), @}
              #ifequal $gripper "1" @{ #nl ?pi:gripper(*pi, [{visible,true}]), @}
              #ifequal $show "0" @{ #nl ?pi:hide(*pi), @}
              #ifequal $moveable "1" @{ #nl ?pi:moveable(*pi, [{b,true}]), @}
              #ifequal $dock "Float"
              @{
                #ifnotnull $pane_position @{ #nl ?pi:floatingPosition(*pi, $pane_position), @}
                #nl ?pi:floatable(*pi, [{b,true}]),
              @}
              #ifequal $dock "Dock" @{ #nl ?pi:dock(*pi), @}
              #ifequal $resize "Resizable"
              @{
                #ifnotnull $pane_size @{ #nl ?pi:floatingSize(*pi, $pane_size), @}
                #nl ?pi:resizable(*pi, [{resizable,true}]),
              @}
              #ifequal $resize "Fixed" @{ #nl ?pi:fixed(*pi), @}
              #ifequal $BottomDockable "0" @{ #nl ?pi:bottomDockable(*pi, [{b,false}]), @}
              #ifequal $TopDockable "0" @{ #nl ?pi:topDockable(*pi, [{b,false}]), @}
              #ifequal $LeftDockable "0" @{ #nl ?pi:leftDockable(*pi, [{b,false}]), @}
              #ifequal $RightDockable "0" @{ #nl ?pi:rightDockable(*pi, [{b,false}]), @}
              #ifequal $floatable "0" @{ #nl ?pi:floatable(*pi, [{b,false}]), @}
              #ifnotnull $aui_row	@{ #nl ?pi:row(*pi, $aui_row), @}
              #ifnotnull $aui_position	@{ #nl ?pi:position(*pi, $aui_position), @}
              #ifnotnull $best_size @{ #nl ?pi:bestSize(*pi, $best_size), @}
              #ifnotnull $min_size @{ #nl ?pi:minSize(*pi, $min_size), @}
              #ifnotnull $max_size @{ #nl ?pi:maxSize(*pi, $max_size), @}
              #ifnotnull $aui_layer @{ #nl ?pi:layer(*pi, $aui_layer), @}
              #ifequal $center_pane "1" @{ #nl ?pi:centerPane(*pi), @}
              #ifequal $default_pane "1" @{ #nl ?pi:defaultPane(*pi), @}
              #ifequal $toolbar_pane "1" @{ #nl ?pi:toolbarPane(*pi), @}
        @}
      @}
    </template>
  </templates>

  <templates class="tool">
    <template name="construction">
      #ifparenttypeequal "toolbar"
      @{
        #ifparentclassnotequal "wxAuiToolBar"
        @{
          #ifequal $kind "wxITEM_NORMAL"
          @{#ifnotnull $label
            @{ wxToolBar:addTool(#wxparent $name, $id, $label, #ifnotnull $bitmap
                                                               @{$bitmap, @}
                                                               #ifnull $bitmap
                                                               @{wxBitmap:new(), @}
                                                               [#ifnotnull $tooltip
                                                                 @{{shortHelp,$tooltip }@}]), @}
          @}
          #ifequal $kind "wxITEM_CHECK"
          @{#ifnotnull $label
            @{ wxToolBar:addCheckTool(#wxparent $name, $id, $label, #ifnotnull $bitmap
                                                                    @{$bitmap, @}
                                                                    #ifnull $bitmap
                                                                    @{wxBitmap:new(), @}
                                                                    [#ifnotnull $tooltip
                                                                      @{{shortHelp,$tooltip }, @}
                                                                     #ifnotnull $statusbar
                                                                      @{{longHelp,$statusbar }@}]), @}
          @}
          #ifequal $kind "wxITEM_RADIO"
          @{#ifnotnull $label
            @{ wxToolBar:addRadioTool(#wxparent $name, $id, $label, #ifnotnull $bitmap
                                                                    @{$bitmap, @}
                                                                    #ifnull $bitmap
                                                                    @{wxBitmap:new(), @}
                                                                    [#ifnotnull $tooltip
                                                                      @{{shortHelp,$tooltip }, @}
                                                                     #ifnotnull $statusbar
                                                                      @{{longHelp,$statusbar }@}]), @}
          @}
        @}
        #ifparentclassequal "wxAuiToolBar"
        @{
          #ifequal #parent $use_explicit_ids "1"
          @{
            wxAuiToolBar:addTool(#parent $name, $id, $label, $bitmap, wxNullBitmap, $kind, $tooltip, $statusbar), #nl
            $name = wxAuiToolBar:findTool(#parent $name, $id),
          @}
          #ifequal #parent $use_explicit_ids "0"
          @{
            $name = wxAuiToolBar:addTool(#parent $name, $id, $label, $bitmap, wxNullBitmap, $kind, $tooltip, $statusbar),
          @}
          #ifequal $context_menu "1"
          @{
            wxAuiToolBar:setToolDropDown(#parent $name, #class:getId($name), true),
          @}
        @}
      @}

      #ifparenttypeequal "toolbar_form"
      @{
        $name = toolbar:addTool(#parent $name, $id, $label, $bitmap, wxNullBitmap, $kind, $tooltip, $statusbar),
      @}
    </template>
    <template name="generated_event_handlers"></template>
    <template name="evt_connect_OnToolClicked"> %% event #class:wxEVT_COMMAND_TOOL_CLICKED isn't currently supported by Erlang </template>
    <template name="evt_connect_OnMenuSelection"> wxToolBar:connect($name, command_menu_selected, *option), </template>
    <template name="evt_connect_OnToolRClicked"> wxToolBar:connect($name, command_tool_rclicked, *option), </template>
    <template name="evt_connect_OnToolEnter"> wxToolBar:connect($name, command_tool_enter, *option), </template>
    <template name="evt_connect_OnUpdateUI"> wxToolBar:connect($name, update_ui, *option), </template>
    <template name="evt_connect_OnAuiToolBarToolDropDown"> #ifparentclassequal "wxAuiToolBar" @{ %% event #class:wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN isn't currently supported by Erlang @}</template>
    <template name="evt_connect_OnAuiToolBarOverflowClick"> #ifparentclassequal "wxAuiToolBar" @{ %% event #class:wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK isn't currently supported by Erlang @}</template>
    <template name="evt_connect_OnAuiToolBarRightClick"> #ifparentclassequal "wxAuiToolBar" @{ %% event #class:wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK isn't currently supported by Erlang @}</template>
    <template name="evt_connect_OnAuiToolBarMiddleClick"> #ifparentclassequal "wxAuiToolBar" @{ %% event #class:wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK isn't currently supported by Erlang @}</template>
    <template name="evt_connect_OnAuiToolBarBeginDrag"> #ifparentclassequal "wxAuiToolBar" @{ %% event #class:wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG isn't currently supported by Erlang @}</template>
  </templates>

  <templates class="toolSeparator">
    <template name="construction">
      wxToolBar:addSeparator(#parent $name),
    </template>
  </templates>

  <templates class="wxInfoBar">
    <template name="construction">
      $name = #class:new(#wxparent $name, $id), isn't currently supported by Erlang
    </template>
  <template name="settings">
    ifnotequal $show_effect "wxSHOW_EFFECT_SLIDE_TO_BOTTOM"
    @{ #class:setShowHideEffects($name, $show_effect, $hide_effect), }@
    ifequal $show_effect "wxSHOW_EFFECT_SLIDE_TO_BOTTOM"
    @{
      #ifnotequal $hide_effect "wxSHOW_EFFECT_SLIDE_TO_TOP"
      @{ #class:setShowHideEffects($name, $show_effect, $hide_effect), }@
    @}

    #ifnotequal $duration "500"
    @{ #class:setEffectDuration($name, $duration), @}
  </template>
  </templates>

</codegen>
