<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<package name="Additional" lib="libadditional" icon="tree_ctrl.xpm" desc="wxWidgets additional controls">

<objectinfo class="wxHtmlWindow" icon="htmlwin.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_htmlWin</property>
    <property name="style" type="bitlist">
        <option name="wxHW_SCROLLBAR_NEVER" help="Never display scrollbars, not even when the page is larger than the window." />
        <option name="wxHW_SCROLLBAR_AUTO"  help="Display scrollbars only if page's size exceeds window's size." />
        <option name="wxHW_NO_SELECTION"    help="Don't allow the user to select text." />wxHW_SCROLLBAR_AUTO</property>
    <event name="OnHtmlCellClicked" class="wxHtmlCellEvent" help="A wxHtmlCell was clicked." />
    <event name="OnHtmlCellHover" class="wxHtmlCellEvent" help="The mouse passed over a wxHtmlCell." />
    <event name="OnHtmlLinkClicked" class="wxHtmlLinkEvent" help="A wxHtmlCell which contains an hyperlink was clicked." />
</objectinfo>

<objectinfo class="wxRichTextCtrl" icon="richtextctrl.xpm" type="expanded_widget">
    <inherits class="wxWindow">
    <property name="window_style">wxVSCROLL|wxHSCROLL|wxNO_BORDER|wxWANTS_CHARS</property>
    </inherits>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_richText</property>
    <property name="style" type="bitlist">
        <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
        <option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
        <option name="wxTE_READONLY"      help="The text will not be user-editable."/>
        <option name="wxTE_AUTO_URL"      help="Highlight the URLs and generate the wxTextUrl events when mouse events occur over them."/>
    </property>
    <event name="OnText" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
    <event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
    <event name="OnTextURL" class="wxTextUrlEvent" help="A mouse event occurred over an URL in the text control (wxMSW and wxGTK2 only)" />
    <event name="OnTextMaxLen" class="wxCommandEvent" help="User tried to enter more text into the control than the limit set by SetMaxLength." />
    <event name="OnRichTextCharacter" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CHARACTER event, generated when the user presses a character key. Valid event functions: GetFlags, GetPosition, GetCharacter." />
    <event name="OnRichTextDelete" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_DELETE event, generated when the user presses the backspace or delete key. Valid event functions: GetFlags, GetPosition." />
    <event name="OnRichTextReturn" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_RETURN event, generated when the user presses the return key. Valid event functions: GetFlags, GetPosition." />
    <event name="OnRichTextStyleChanged" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED event, generated when styling has been applied to the control. Valid event functions: GetPosition, GetRange." />
    <event name="OnRichTextStyleSheetChanged" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING event, generated when the control's stylesheet has changed, for example the user added, edited or deleted a style. Valid event functions: GetRange, GetPosition." />
    <event name="OnRichTextStyleSheetReplacing" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING event, generated when the control's stylesheet is about to be replaced, for example when a file is loaded into the control. Valid event functions: Veto, GetOldStyleSheet, GetNewStyleSheet." />
    <event name="OnRichTextStyleSheetReplaced" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED event, generated when the control's stylesheet has been replaced, for example when a file is loaded into the control. Valid event functions: GetOldStyleSheet, GetNewStyleSheet." />
    <event name="OnRichTextContentInserted" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED event, generated when content has been inserted into the control. Valid event functions: GetPosition, GetRange." />
    <event name="OnRichTextContentDeleted" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED event, generated when content has been deleted from the control. Valid event functions: GetPosition, GetRange." />
</objectinfo>

<objectinfo class="wxStyledTextCtrl" icon="scintilla.xpm" type="expanded_widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text" >m_scintilla</property>
    <property name="folding" type="bool" help="Enable folding.">1</property>
    <property name="line_numbers" type="bool" help="Show line numbers.">1</property>
    <property name="indentation_guides" type="bool" help="Show indentation guides.">1</property>
    <property name="tab_indents" type="bool" help="The tab key always indents, use tabs or spaces, instead of always inserting a tab character.">1</property>
    <property name="backspace_unindents" type="bool" help="The backspace key unindents, instead of just deleting one space.">1</property>
    <property name="view_eol" type="bool" help="Show end of line characters.">0</property>
    <property name="view_whitespace" type="bool" help="Show whitespace characters.">0</property>
    <property name="use_tabs" type="bool" help="Use tabs for indenting, instead of spaces.">1</property>
    <property name="tab_width" type="text" help="The number of spaces per tab character.">4</property>
</objectinfo>

<objectinfo class="wxToggleButton" startgroup="1" icon="toggle_button.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_toggleBtn</property>
    <property name="label" type="wxString_i18n">Toggle me!</property>
    <property name="value" type="bool">0</property>
    <event name="OnToggleButton" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RADIOBUTTON_SELECTED event, when the radiobutton is clicked." />
</objectinfo>

<objectinfo class="wxSearchCtrl" icon="search.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_searchCtrl</property>
    <property name="style" type="bitlist">
        <option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
        <option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
        <option name="wxTE_NOHIDESEL"     help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms."/>
        <option name="wxTE_LEFT"          help="The text in the control will be left-justified (default)."/>
        <option name="wxTE_CENTRE"        help="The text in the control will be centered (currently wxMSW and wxGTK2 only). "/>
        <option name="wxTE_RIGHT"         help="The text in the control will be right-justified (currently wxMSW and wxGTK2 only)."/>
        <option name="wxTE_CAPITALIZE"    help="On PocketPC and Smartphone, causes the first letter to be capitalized."/>
    </property>
    <property name="value" type="wxString_i18n" />
    <property name="search_button" type="bool" help="Shows or hides the search button.">1</property>
    <property name="cancel_button" type="bool" help="Shows or hides the cancel button.">0</property>
    <event name="OnText" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
    <event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
    <event name="OnSearchButton" class="wxCommandEvent" help="Respond to a wxEVT_SEARCHCTRL_SEARCH_BTN event, generated when the search button is clicked. Note that this does not initiate a search." />
    <event name="OnCancelButton" class="wxCommandEvent" help="Respond to a wxEVT_SEARCHCTRL_CANCEL_BTN event, generated when the cancel button is clicked." />
</objectinfo>

<objectinfo class="wxColourPickerCtrl"  startgroup="1" icon="colourPickerIcon.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_colourPicker</property>
    <property name="style" type="bitlist">
        <option name="wxCLRP_DEFAULT_STYLE" help="The default style: 0."/>
        <option name="wxCLRP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxColourPickerCtrl and which can be used by the user to specify a colour. The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
        <option name="wxCLRP_SHOW_LABEL" help="Shows the colour in HTML form (AABBCC) as colour button label (instead of no label at all)."/>
        wxCLRP_DEFAULT_STYLE
    </property>
    <property name="colour" type="wxColour"/>
    <event name="OnColourChanged" class="wxColourPickerEvent" help="The user changed the colour selected in the control either using the button or using text control (see wxCLRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
</objectinfo>

<objectinfo class="wxFontPickerCtrl" icon="fontPicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_fontPicker</property>
    <property name="style" type="bitlist">
        <option name="wxFNTP_DEFAULT_STYLE" help="The default style: wxFNTP_FONTDESC_AS_LABEL | wxFNTP_USEFONT_FOR_LABEL."/>
        <option name="wxFNTP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxFontPickerCtrl and which can be used by the user to specify a font (see SetSelectedFont). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
        <option name="wxFNTP_FONTDESC_AS_LABEL" help="Keeps the label of the button updated with the fontface name and the font size. E.g. choosing &quot;Times New Roman bold, italic with size 10&quot; from the fontdialog, will update the label (overwriting any previous label) with the &quot;Times New Roman, 10&quot; text."/>
        <option name="wxFNTP_USEFONT_FOR_LABEL" help="Uses the currently selected font to draw the label of the button."/>
        wxFNTP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxFont"/>
    <property name="max_point_size" type="uint" help="Sets the maximum point size value allowed for the user-chosen font. The default value is 100. Note that big fonts can require a lot of memory and CPU time both for creation and for rendering; thus, specially because the user has the option to specify the fontsize through a text control (see wxFNTP_USE_TEXTCTRL), it's a good idea to put a limit to the maximum font size when huge fonts do not make much sense.">
    100
    </property>
    <event name="OnFontChanged" class="wxFontPickerEvent" help="The user changed the font selected in the control either using the button or using text control (see wxFNTP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, i.e. recognizable)."/>
</objectinfo>

<objectinfo class="wxFilePickerCtrl" icon="filePicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_filePicker</property>
    <property name="style" type="bitlist">
        <option name="wxFLP_DEFAULT_STYLE" help="The default style: includes wxFLP_OPEN | wxFLP_FILE_MUST_EXIST and, under wxMSW only, wxFLP_USE_TEXTCTRL."/>
        <option name="wxFLP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxFilePickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
        <option name="wxFLP_OPEN" help="Creates a picker which allows the user to select a file to open."/>
        <option name="wxFLP_SAVE" help="Creates a picker which allows the user to select a file to save."/>
        <option name="wxFLP_OVERWRITE_PROMPT" help="Can be combined with wxFLP_SAVE only: ask confirmation to the user before selecting a file."/>
        <option name="wxFLP_FILE_MUST_EXIST" help="Can be combined with wxFLP_OPEN only: the selected file must be an existing file."/>
        <option name="wxFLP_CHANGE_DIR" help="Change current working directory on each user file selection change."/>
        <option name="wxFLP_SMALL" help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one."/>
        wxFLP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxString"/>
    <property name="message" type="wxString_i18n">Select a file</property>
    <property name="wildcard" type="wxString_i18n">*.*</property>
    <event name="OnFileChanged" class="wxFileDirPickerEvent" help="The user changed the file selected in the control either using the button or using text control (see wxFLP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing file path if wxFLP_FILE_MUST_EXIST was given)."/>
</objectinfo>

<objectinfo class="wxDirPickerCtrl" icon="dirPicker.xpm" type="widget">
    <inherits class="wxWindow"/>
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_dirPicker</property>
    <property name="style" type="bitlist">
        <option name="wxDIRP_DEFAULT_STYLE" help="The default style: includes wxDIRP_DIR_MUST_EXIST and, under wxMSW only, wxDIRP_USE_TEXTCTRL."/>
        <option name="wxDIRP_USE_TEXTCTRL" help="Creates a text control to the left of the picker button which is completely managed by the wxDirPickerCtrl and which can be used by the user to specify a path (see SetPath). The text control is automatically synchronized with button's value. Use functions defined in wxPickerBase to modify the text control."/>
        <option name="wxDIRP_DIR_MUST_EXIST" help="Creates a picker which allows to select only existing directories. wxGTK control always adds this flag internally as it does not support its absence."/>
        <option name="wxDIRP_CHANGE_DIR" help="Change current working directory on each user directory selection change."/>
        <option name="wxDIRP_SMALL" help="Use smaller version of the control with a small &quot;...&quot; button instead of the normal &quot;Browse&quot; one."/>
        wxDIRP_DEFAULT_STYLE
    </property>
    <property name="value" type="wxString"/>
    <property name="message" type="wxString_i18n">Select a folder</property>
    <event name="OnDirChanged" class="wxFileDirPickerEvent" help="The user changed the directory selected in the control either using the button or using text control (see wxDIRP_USE_TEXTCTRL; note that in this case the event is fired only if the user's input is valid, e.g. an existing directory path)."/>
</objectinfo>

<objectinfo class="wxDatePickerCtrl" icon="datepicker.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_datePicker</property>
    <property name="style" type="bitlist">
        <option name="wxDP_SPIN"        help="Creates a control without a month calendar drop down but with spin-control-like arrows to change individual date components. This style is not supported by the generic version." />
        <option name="wxDP_DROPDOWN"    help="Creates a control with a month calendar drop-down part from which the user can select a date." />
        <option name="wxDP_SHOWCENTURY" help="Forces display of the century in the default date format. Without this style the century could be displayed, or not, depending on the default date representation in the system." />
        <option name="wxDP_ALLOWNONE"   help="With this style, the control allows the user to not enter any valid date at all. Without it - the default - the control always has some valid date." />
        <option name="wxDP_DEFAULT"     help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and wxDP_DROPDOWN elsewhere)." />wxDP_DEFAULT</property>
    <event name="OnDateChanged" class="wxDateEvent" help="This event fires when the user changes the current selection in the control." />
</objectinfo>

<objectinfo class="wxTimePickerCtrl" icon="timepicker.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_timePicker</property>
    <property name="style" type="bitlist">
        <option name="wxTP_DEFAULT"     help="Creates a control with the style that is best supported for the current platform (currently wxDP_SPIN under Windows and wxDP_DROPDOWN elsewhere)." />wxDP_DEFAULT</property>
    <event name="OnTimeChanged" class="wxDateEvent" help="This event fires when the user changes the current selection in the control." />
</objectinfo>


<objectinfo class="wxCalendarCtrl" startgroup="1" icon="calendar.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_calendar</property>
    <property name="style" type="bitlist">
        <option name="wxCAL_SUNDAY_FIRST"               help="Show Sunday as the first day in the week." />
        <option name="wxCAL_MONDAY_FIRST"               help="Show Monday as the first day in the week." />
        <option name="wxCAL_SHOW_HOLIDAYS"              help="Highlight holidays in the calendar." />
        <option name="wxCAL_NO_YEAR_CHANGE"             help="Disable the year changing." />
        <option name="wxCAL_NO_MONTH_CHANGE"            help="Disable the month (and, implicitly, the year) changing." />
        <option name="wxCAL_SHOW_SURROUNDING_WEEKS"     help="Show the neighbouring weeks in the previous and next months." />
        <option name="wxCAL_SEQUENTIAL_MONTH_SELECTION" help="Use alternative, more compact, style for the month and year selection controls." />wxCAL_SHOW_HOLIDAYS</property>
    <event name="OnCalendar" class="wxCalendarEvent" help="A day was double clicked in the calendar." />
    <event name="OnCalendarSelChanged" class="wxCalendarEvent" help="The selected date changed." />
    <event name="OnCalendarDay" class="wxCalendarEvent" help="The selected day changed." />
    <event name="OnCalendarMonth" class="wxCalendarEvent" help="The selected month changed." />
    <event name="OnCalendarYear" class="wxCalendarEvent" help="The selected year changed." />
    <event name="OnCalendarWeekDayClicked" class="wxCalendarEvent" help="User clicked on the week day header." />
</objectinfo>

<objectinfo class="wxScrollBar" icon="scrollbar.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <inherits class="Validator" />
    <property name="name" type="text">m_scrollBar</property>
    <property name="value" help="The position of the scrollbar in scroll units." type="uint">0</property>
    <property name="range" help="The maximum position of the scrollbar." type="uint">100</property>
    <property name="thumbsize" help="The size of the thumb, or visible portion of the scrollbar, in scroll units." type="uint">1</property>
    <property name="pagesize" help="This is the number of scroll units that will be scrolled when the user pages up or down." type="uint">1</property>
    <property name="style" type="option">
        <option name="wxSB_HORIZONTAL" help="Specifies a horizontal scrollbar." />
        <option name="wxSB_VERTICAL"   help="Specifies a vertical scrollbar." />wxSB_HORIZONTAL</property>
    <event name="OnScroll" class="wxScrollEvent" help="Process all scroll events." />
    <event name="OnScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position)." />
    <event name="OnScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position)." />
    <event name="OnScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events." />
    <event name="OnScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events." />
    <event name="OnScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events." />
    <event name="OnScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events." />
    <event name="OnScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack)." />
    <event name="OnScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events." />
    <event name="OnScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only)." />
    <event name="OnCommandScroll" class="wxScrollEvent" help="Process all scroll events. Variant taking a window identifier." />
    <event name="OnCommandScrollTop" class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position). Variant taking a window identifier." />
    <event name="OnCommandScrollBottom" class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position). Variant taking a window identifier." />
    <event name="OnCommandScrollLineUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events. Variant taking a window identifier." />
    <event name="OnCommandScrollLineDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events. Variant taking a window identifier." />
    <event name="OnCommandScrollPageUp" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events. Variant taking a window identifier." />
    <event name="OnCommandScrollPageDown" class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events. Variant taking a window identifier." />
    <event name="OnCommandScrollThumbTrack" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack). Variant taking a window identifier." />
    <event name="OnCommandScrollThumbRelease" class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events. Variant taking a window identifier." />
    <event name="OnCommandScrollChanged" class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only). Variant taking a window identifier." />
</objectinfo>

<objectinfo class="wxSpinCtrl" icon="spin_ctrl.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_spinCtrl</property>
    <property name="value" type="wxString"></property>
    <property name="min" type="int"     help="Minimal value.">0</property>
    <property name="max" type="int"     help="Maximal value.">10</property>
    <property name="initial" type="uint" help="Initial value.">0</property>
    <property name="style" type="bitlist">
        <option name="wxSP_ARROW_KEYS"     help="The user can use arrow keys to change the value." />
        <option name="wxSP_WRAP"           help="The value wraps at the minimum and maximum." />
		<option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
		wxSP_ARROW_KEYS
	</property>
    <event name="OnSpinCtrl" class="wxSpinEvent" help="Generated whenever the numeric value of the spinctrl is updated." />
    <event name="OnSpinCtrlText" class="wxCommandEvent" help="Generated whenever the user modifies the text in the edit part of the spin control directly." />
	<event name="OnTextEnter" class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in the edit part of the spin control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
</objectinfo>

<objectinfo class="wxSpinCtrlDouble" icon="spin_ctrl_double.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_spinCtrlDouble</property>
    <property name="value" type="wxString"></property>
    <property name="min" type="float"     help="Minimal value.">0</property>
    <property name="max" type="float"     help="Maximal value.">100</property>
	<property name="initial" type="float" help="Initial value.">0</property>
	<property name="inc" type="float"     help="Increment value.">1</property>
    <property name="style" type="bitlist">
        <option name="wxSP_ARROW_KEYS"     help="The user can use arrow keys to change the value." />
        <option name="wxSP_WRAP"           help="The value wraps at the minimum and maximum." />
		wxSP_ARROW_KEYS
	</property>
    <event name="OnSpinCtrlDouble" class="wxSpinDoubleEvent" help="Generated whenever the numeric value of the control is updated." />
</objectinfo>

<objectinfo class="wxSpinButton" icon="spinbtn.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_spinBtn</property>
    <property name="style" type="bitlist">
        <option name="wxSP_HORIZONTAL" help="Specifies a horizontal spin button (note that this style is not supported in wxGTK)." />
        <option name="wxSP_VERTICAL"   help="Specifies a vertical spin button." />
        <option name="wxSP_ARROW_KEYS" help="The user can use arrow keys to change the value." />
        <option name="wxSP_WRAP"       help="The value wraps at the minimum and maximum." /></property>
    <event name="OnSpin" class="wxSpinEvent" help="Generated whenever an arrow is pressed." />
    <event name="OnSpinUp" class="wxSpinEvent" help="Generated when left/up arrow is pressed." />
    <event name="OnSpinDown" class="wxSpinEvent" help="Generated when right/down arrow is pressed." />
</objectinfo>

<objectinfo class="wxHyperlinkCtrl" icon="hyperlink_ctrl.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_hyperlink</property>
    <property name="label" type="wxString_i18n" help="Text of the hyperlink">wxFB Website</property>
    <property name="url" type="wxString" help="Target of the hyperlink">http://www.wxformbuilder.org</property>
    <property name="hover_color" type="wxColour" help="The colour used to print the label of the hyperlink when the mouse is over the control."/>
    <property name="normal_color" type="wxColour" help="The colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control."/>
    <property name="visited_color" type="wxColour" help="The colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited)."/>
    <property name="style" type="bitlist">
        <option name="wxHL_ALIGN_LEFT" help="Align the text to the left."/>
        <option name="wxHL_ALIGN_RIGHT" help="Align the text to the right."/>
        <option name="wxHL_ALIGN_CENTRE" help="Center the text (horizontally)."/>
        <option name="wxHL_CONTEXTMENU" help="Pop up a context menu when the hyperlink is right-clicked. The context menu contains a &quot;Copy URL&quot; menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control."/>
        <option name="wxHL_DEFAULT_STYLE" help="The default style for wxHyperlinkCtrl: wxNO_BORDER|wxHL_CONTEXTMENU|wxHL_ALIGN_CENTRE."/>
        wxHL_DEFAULT_STYLE
    </property>
    <event name="OnHyperlink" class="wxHyperlinkEvent" help="The hyperlink was (left) clicked. If this event is not handled in user's code (or it's skipped; see wxEvent::Skip), then a call to wxLaunchDefaultBrowser is done with the hyperlink's URL."/>
</objectinfo>

<objectinfo class="wxGenericDirCtrl" icon="genericdir_ctrl.xpm" type="expanded_widget">
    <inherits class="wxTreeCtrlBase"/>
    <inherits class="wxWindow">
        <property name="window_style">wxSUNKEN_BORDER</property>
    </inherits>
    <inherits class="AUI" />
    <property name="name" type="text">m_genericDirCtrl</property>
    <property name="defaultfolder" type="wxString_i18n" help="Initial Directory."/>
    <property name="filter" type="wxString_i18n" help="A filter string, using the same syntax as that for wxFileDialog. This may be empty if filters are not being used. Example: &quot;All files (*.*)|*.*|JPEG files (*.jpg)|*.jpg&quot;."/>
    <property name="defaultfilter" type="uint" help="The zero-indexed default filter setting.">0</property>
    <property name="show_hidden" type="bool" help="Show hidden files">0</property>
    <property name="style" type="bitlist">
        <option name="wxDIRCTRL_DIR_ONLY" help="Only show directories, and not files."/>
        <option name="wxDIRCTRL_3D_INTERNAL" help="Use 3D borders for internal controls."/>
        <option name="wxDIRCTRL_SELECT_FIRST" help="When setting the default path, select the first file in the directory."/>
        <option name="wxDIRCTRL_SHOW_FILTERS" help="Show the drop-down filter list."/>
        <option name="wxDIRCTRL_EDIT_LABELS" help="Allow the folder and file labels to be editable."/>
        <option name="wxDIRCTRL_MULTIPLE" help="Allows multiple files and folders to be selected simultaneously"/>
        wxDIRCTRL_3D_INTERNAL
    </property>
</objectinfo>

<objectinfo class="wxMediaCtrl" icon="media_ctrl.xpm" type="widget">
    <inherits class="wxControl" />
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text">m_mediaCtrl</property>
    <property name="file" type="file" help="The path to media file."/>
    <property name="play" type="bool" help="Play the media file."/>
    <property name="playback_rate" type="float" help="Sets the playback rate, or speed of the media, to that referred by dRate. 1.0 represents normal speed, while 2.0 represents twice the normal speed of the media, for example. Not supported on the GStreamer (Unix) backend.">1</property>
    <property name="volume" type="float" help="Sets the volume of the media from a 0.0 to 1.0 range to that referred by dVolume. 1.0 represents full volume, while 0.5 represents half (50 percent) volume, for example. Note that this may not be exact due to conversion and rounding errors, although setting the volume to full or none is always exact.">1</property>
    <property name="player_controls" type="option">
        <option name="STEP" help="wxMEDIACTRLPLAYERCONTROLS_STEP, Step controls like fastfoward, step one frame etc. "/>
        <option name="VOLUME" help="wxMEDIACTRLPLAYERCONTROLS_VOLUME, Volume controls like the speaker icon, volume slider, etc. "/>
        <option name="DEFAULT" help="wxMEDIACTRLPLAYERCONTROLS_DEFAULT, Default controls for the toolkit. Currently a typedef for wxMEDIACTRLPLAYERCONTROLS_STEP and wxMEDIACTRLPLAYERCONTROLS_VOLUME. "/>
        <option name="NONE" help="wxMEDIACTRLPLAYERCONTROLS_NONE, No controls. return wxMediaCtrl to it's default state. "/>
    </property>
</objectinfo>

<objectinfo class="CustomControl" startgroup="1" icon="custom_control.xpm" type="widget">
    <inherits class="wxWindow" />
    <inherits class="AUI" />
    <property name="name" type="text" help="The control is added to a sizer using this name.">m_customControl</property>
    <property name="class" type="text" help="The control is generated to XRC with this class."/>
    <property name="declaration" type="text" help="Code to generate for the declaration of this control."/>
    <property name="construction" type="text" help="Code to generate for the construction of this control."/>
    <property name="include" type="text" help="Code to generate for the include statements for this control."/>
    <property name="settings" type="text" help="Code to generate for the settings of this control."/>
</objectinfo>

<objectinfo class="wxTimer" startgroup="1" icon="timer.xpm" type="nonvisual">
    <property name="name" type="text" help="wxTimer object name.">m_timer</property>
    <property name="id" type="macro" help="Timer identifier.">wxID_ANY</property>
    <property name="period" type="int" help="Timer period in milliseconds.">1000</property>
    <property name="enabled" type="bool" help="Enable timer on startup.">0</property>
    <property name="oneshot" type="bool" help="Produce timer event just once.">0</property>
    <event name="OnTimer" class="wxTimerEvent" help="Process a wxEVT_TIMER event, when the timer ticks." />
</objectinfo>

</package>

