<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com

Python code generation written by
  Michal Bližňák - michal.bliznak@gmail.com
-->
<codegen language="Python">

  <templates class="wxHtmlWindow">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @})</template>
    <template name="include">import wx.html</template>
    <template name="evt_connect_OnHtmlCellClicked">self.$name.Bind(wx.html.EVT_HTML_CELL_CLICKED, #handler)</template>
    <template name="evt_connect_OnHtmlCellHover">self.$name.Bind(wx.html.EVT_HTML_CELL_HOVER, #handler)</template>
    <template name="evt_connect_OnHtmlLinkClicked">self.$name.Bind(wx.html.EVT_HTML_LINK_CLICKED, #handler)</template>
  </templates>

  <templates class="wxRichTextCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $value, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="include">import wx.richtext</template>
    <template name="evt_connect_OnText">self.$name.Bind(wx.EVT_TEXT, #handler)</template>
    <template name="evt_connect_OnTextEnter">self.$name.Bind(wx.EVT_TEXT_ENTER, #handler)</template>
    <template name="evt_connect_OnTextURL">self.$name.Bind(wx.EVT_TEXT_URL, #handler)</template>
    <template name="evt_connect_OnTextMaxLen">self.$name.Bind(wx.EVT_TEXT_MAXLEN, #handler)</template>
    <template name="evt_connect_OnRichTextCharacter">self.$name.Bind(wx.richtext.EVT_RICHTEXT_CHARACTER, #handler)</template>
    <template name="evt_connect_OnRichTextDelete">self.$name.Bind(wx.richtext.EVT_RICHTEXT_DELETE, #handler)</template>
    <template name="evt_connect_OnRichTextReturn">self.$name.Bind(wx.richtext.EVT_RICHTEXT_RETURN, #handler)</template>
    <template name="evt_connect_OnRichTextStyleChanged">self.$name.Bind(wx.richtext.EVT_RICHTEXT_STYLE_CHANGED, #handler)</template>
    <template name="evt_connect_OnRichTextStyleSheetChanged">self.$name.Bind(wx.richtext.EVT_RICHTEXT_STYLESHEET_CHANGED, #handler)</template>
    <template name="evt_connect_OnRichTextStyleSheetReplacing">self.$name.Bind(wx.richtext.EVT_RICHTEXT_STYLESHEET_REPLACING, #handler)</template>
    <template name="evt_connect_OnRichTextStyleSheetReplaced">self.$name.Bind(wx.richtext.EVT_RICHTEXT_STYLESHEET_REPLACED, #handler)</template>
    <template name="evt_connect_OnRichTextContentInserted">self.$name.Bind(wx.richtext.EVT_RICHTEXT_CONTENT_INSERTED, #handler)</template>
    <template name="evt_connect_OnRichTextContentDeleted">$self.$name.Bind(wx.richtext.EVT_RICHTEXT_CONTENT_DELETED, #handler)</template>
  </templates>

  <templates class="wxToggleButton">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $label, $pos, $size, $window_style #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="settings">#ifnotequal $value "0" @{ self.$name.SetValue(True) @}</template>
    <template name="evt_connect_OnToggleButton">self.$name.Bind(wx.EVT_TOGGLEBUTTON, #handler)</template>
  </templates>

  <templates class="wxBitmapToggleButton">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $bitmap, $pos, $size, $window_style #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
  </templates>

  <templates class="wxColourPickerCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id,
      #ifnull $colour
      @{ wx.BLACK, @}
      #ifnotnull $colour
      @{ $colour, @}
      $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})
    </template>
    <template name="evt_connect_OnColourChanged">self.$name.Bind(wx.EVT_COLOURPICKER_CHANGED, #handler)</template>
  </templates>

  <templates class="wxFontPickerCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id,
      #ifnull $value
      @{ wx.NullFont, @}
      #ifnotnull $value
      @{ $value, @}
      $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})
    </template>
    <template name="settings">
      #ifnotnull $max_point_size
      @{ self.$name.SetMaxPointSize($max_point_size) @}
    </template>
    <template name="evt_connect_OnFontChanged">self.$name.Bind(wx.EVT_FONTPICKER_CHANGED, #handler)</template>
  </templates>

  <templates class="wxFilePickerCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id, $value, $message, $wildcard, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})
    </template>
    <template name="evt_connect_OnFileChanged">self.$name.Bind(wx.EVT_FILEPICKER_CHANGED, #handler)</template>
  </templates>

  <templates class="wxDirPickerCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id, $value, $message, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})
    </template>
    <template name="evt_connect_OnDirChanged">self.$name.Bind(wx.EVT_DIRPICKER_CHANGED, #handler)</template>
  </templates>

  <templates class="wxDatePickerCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, wx.DefaultDateTime, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="include">import wx.adv</template>
    <template name="evt_connect_OnDateChanged">self.$name.Bind(wx.adv.EVT_DATE_CHANGED, #handler)</template>
  </templates>

  <templates class="wxTimePickerCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, wx.DefaultDateTime, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="include">import wx.adv</template>
    <template name="evt_connect_OnTimeChanged">self.$name.Bind(wx.adv.EVT_TIME_CHANGED, #handler)</template>
  </templates>

  <templates class="wxCalendarCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, wx.DefaultDateTime, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @})</template>
    <template name="include">import wx.adv</template>
    <template name="evt_connect_OnCalendar">self.$name.Bind(wx.adv.EVT_CALENDAR, #handler)</template>
    <template name="evt_connect_OnCalendarSelChanged">self.$name.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, #handler)</template>
    <template name="evt_connect_OnCalendarPageChanged">self.$name.Bind(wx.adv.EVT_CALENDAR_PAGE_CHANGED, #handler)</template>
    <template name="evt_connect_OnCalendarDay">self.$name.Bind(wx.adv.EVT_CALENDAR_DAY, #handler)</template>
    <template name="evt_connect_OnCalendarMonth">self.$name.Bind(wx.adv.EVT_CALENDAR_MONTH, #handler)</template>
    <template name="evt_connect_OnCalendarYear">self.$name.Bind(wx.adv.EVT_CALENDAR_YEAR, #handler)</template>
    <template name="evt_connect_OnCalendarWeekDayClicked">self.$name.Bind(wx.adv.EVT_CALENDAR_WEEKDAY_CLICKED, #handler)</template>
    <template name="evt_connect_OnCalendarWeekClicked">self.$name.Bind(wx.adv.EVT_CALENDAR_WEEK_CLICKED, #handler)</template>
  </templates>

  <templates class="wxScrollBar">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="evt_entry_OnScroll">EVT_SCROLL(#handler)</template>
    <template name="evt_connect_OnScroll">
      self.$name.Bind(wx.EVT_SCROLL, #handler)
      <!-- $name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this ); -->
    </template>
    <template name="evt_connect_OnScrollTop">self.$name.Bind(wx.EVT_SCROLL_TOP, #handler)</template>
    <template name="evt_connect_OnScrollBottom">self.$name.Bind(wx.EVT_SCROLL_BOTTOM, #handler)</template>
    <template name="evt_connect_OnScrollLineUp">self.$name.Bind(wx.EVT_SCROLL_LINEUP, #handler)</template>
    <template name="evt_connect_OnScrollLineDown">self.$name.Bind(wx.EVT_SCROLL_LINEDOWN, #handler)</template>
    <template name="evt_connect_OnScrollPageUp">self.$name.Bind(wx.EVT_SCROLL_PAGEUP, #handler)</template>
    <template name="evt_connect_OnScrollPageDown">self.$name.Bind(wx.EVT_SCROLL_PAGEDOWN, #handler)</template>
    <template name="evt_connect_OnScrollThumbTrack">self.$name.Bind(wx.EVT_SCROLL_THUMBTRACK, #handler)</template>
    <template name="evt_connect_OnScrollThumbRelease">self.$name.Bind(wx.EVT_SCROLL_THUMBRELEASE, #handler)</template>
    <template name="evt_connect_OnScrollChanged">self.$name.Bind(wx.EVT_SCROLL_CHANGED, #handler)</template>
    <template name="evt_connect_OnCommandScroll">
      self.$name.Bind(wx.EVT_COMMAND_SCROLL, #handler)
      <!-- $name->Connect( wxEVT_SCROLL_BOTTOM, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_LINEUP, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_LINEDOWN, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_PAGEUP, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_PAGEDOWN, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_THUMBTRACK, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_THUMBRELEASE, #handler, NULL, this ); #nl
      $name->Connect( wxEVT_SCROLL_CHANGED, #handler, NULL, this ); -->
    </template>
    <template name="evt_connect_OnCommandScrollTop">self.$name.Bind(wx.EVT_COMMAND_SCROLL_TOP, #handler)</template>
    <template name="evt_connect_OnCommandScrollBottom">self.$name.Bind(wx.EVT_COMMAND_SCROLL_BOTTOM, #handler)</template>
    <template name="evt_connect_OnCommandScrollLineUp">self.$name.Bind(wx.EVT_COMMAND_SCROLL_LINEUP, #handler)</template>
    <template name="evt_connect_OnCommandScrollLineDown">self.$name.Bind(wx.EVT_COMMAND_SCROLL_LINEDOWN, #handler)</template>
    <template name="evt_connect_OnCommandScrollPageUp">self.$name.Bind(wx.EVT_COMMAND_SCROLL_PAGEUP, #handler)</template>
    <template name="evt_connect_OnCommandScrollPageDown">self.$name.Bind(wx.EVT_COMMAND_SCROLL_PAGEDOWN, #handler)</template>
    <template name="evt_connect_OnCommandScrollThumbTrack">self.$name.Bind(wx.EVT_COMMAND_SCROLL_THUMBTRACK, #handler)</template>
    <template name="evt_connect_OnCommandScrollThumbRelease">self.$name.Bind(wx.EVT_COMMAND_SCROLL_THUMBRELEASE, #handler)</template>
    <template name="evt_connect_OnCommandScrollChanged">self.$name.Bind(wx.EVT_COMMAND_SCROLL_CHANGED, #handler)</template>
  </templates>

  <templates class="wxSpinCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $value, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @}, $min, $max, $initial #ifnotnull $window_name @{, $window_name @})</template>
    <template name="evt_connect_OnSpinCtrl">self.$name.Bind(wx.EVT_SPINCTRL, #handler)</template>
    <template name="evt_connect_OnSpinCtrlText">self.$name.Bind(wx.EVT_TEXT, #handler)</template>
    <template name="evt_connect_OnTextEnter">self.$name.Bind(wx.EVT_TEXT_ENTER, #handler)</template>
  </templates>

  <templates class="wxSpinCtrlDouble">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $value, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @}, $min, $max, $initial, $inc #ifnotnull $window_name @{, $window_name @})</template>
    <template name="settings">self.$name.SetDigits($digits)</template>
    <template name="evt_connect_OnSpinCtrlDouble">self.$name.Bind(wx.EVT_SPINCTRLDOUBLE, #handler)</template>
    <template name="evt_connect_OnSpinCtrlText">self.$name.Bind(wx.EVT_TEXT, #handler)</template>
    <template name="evt_connect_OnTextEnter">self.$name.Bind(wx.EVT_TEXT_ENTER, #handler)</template>
  </templates>

  <templates class="wxSpinButton">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @})</template>
    <template name="evt_connect_OnSpin">self.$name.Bind(wx.EVT_SPIN, #handler)</template>
    <template name="evt_connect_OnSpinUp">self.$name.Bind(wx.EVT_SPIN_UP, #handler)</template>
    <template name="evt_connect_OnSpinDown">self.$name.Bind(wx.EVT_SPIN_DOWN, #handler)</template>
  </templates>

  <templates class="wxHyperlinkCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $label, $url, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, $window_name @})</template>
    <template name="settings">
      #ifnotnull $hover_color
      @{ #nl self.$name.SetHoverColour($hover_color) @}

      #ifnotnull $normal_color
      @{ #nl self.$name.SetNormalColour($normal_color) @}

      #ifnotnull $visited_color
      @{ #nl self.$name.SetVisitedColour($visited_color) @}
    </template>
    <template name="include">import wx.adv</template>
    <template name="evt_connect_OnHyperlink">self.$name.Bind(wx.adv.EVT_HYPERLINK, #handler)</template>
  </templates>

  <templates class="wxGenericDirCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $defaultfolder, $pos, $size, $style #ifnotnull $window_style @{ |$window_style@}, $filter, $defaultfilter #ifnotnull $window_name @{, $window_name @})</template>
    <template name="settings">
      #nl self.$name.ShowHidden($show_hidden)
    </template>
    <template name="evt_connect_OnDirctrlSelectionChanged">self.$name.Bind(wx.EVT_DIRCTRL_SELECTIONCHANGED, #handler)</template>
    <template name="evt_connect_OnDirctrlFileActivated">self.$name.Bind(wx.EVT_DIRCTRL_FILEACTIVATED, #handler)</template>
  </templates>

  <templates class="wxSearchCtrl">
    <template name="construction">self.$name = #class(#wxparent $name, $id, $value, $pos, $size, $style #ifnotnull $window_style @{ |$window_style @} #ifnotnull $window_name @{, wx.DefaultValidator, $window_name @})</template>
    <template name="settings">
      self.$name.ShowSearchButton($search_button)
      #nl self.$name.ShowCancelButton($cancel_button)
    </template>
    <template name="evt_connect_OnText">self.$name.Bind(wx.EVT_TEXT, #handler)</template>
    <template name="evt_connect_OnTextEnter">self.$name.Bind(wx.EVT_TEXT_ENTER, #handler)</template>
    <template name="evt_connect_OnSearchButton">self.$name.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, #handler)</template>
    <template name="evt_connect_OnCancelButton">self.$name.Bind(wx.EVT_SEARCHCTRL_CANCEL_BTN, #handler)</template>
  </templates>

  <templates class="CustomControl">
    <template name="construction">$construction</template>
    <template name="settings">$settings</template>
    <template name="include">$include</template>
  </templates>

  <templates class="CustomCode">
    <template name="include">$import_python</template>
    <template name="construction">$code_python</template>
  </templates>

  <templates class="wxMediaCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id, wx.EmptyString, $pos, $size)
      #ifnotnull $file
      @{ #nl self.$name.Load($file) @}
      #ifnotnull $playback_rate
      @{#nl self.$name.SetPlaybackRate($playback_rate)@}
      #ifnotnull $volume
      @{#nl self.$name.SetVolume($volume)@}
      #ifnotnull $player_controls
      @{#nl self.$name.ShowPlayerControls(wx.media.MEDIACTRLPLAYERCONTROLS_$player_controls)@}
    </template>
    <template name="settings">
      #ifequal $play "1"
      @{#nl self.$name.Play()@}
    </template>
    <template name="include">import wx.media</template>
  </templates>

  <templates class="wxTimer">
    <template name="construction">
      self.$name = #class() #nl
      self.$name.SetOwner(#wxparent $name, self.$name.GetId())
    </template>
    <template name="settings">
      #ifequal $enabled "1"
      @{ self.$name.Start($period #ifequal $oneshot "1" @{, True@}) #nl @}
    </template>
    <template name="evt_connect_OnTimer">#wxparent $name.Bind(wx.EVT_TIMER, #handler, id=self.$name.GetId())</template>
  </templates>

  <templates class="wxStyledTextCtrl">
    <template name="construction">
      self.$name = #class(#wxparent $name, $id,  $pos, $size, $window_style)
      #nl self.$name.SetUseTabs($use_tabs)
      #nl self.$name.SetTabWidth($tab_width)
      #nl self.$name.SetIndent($tab_width)
      #nl self.$name.SetTabIndents($tab_indents)
      #nl self.$name.SetBackSpaceUnIndents($backspace_unindents)
      #nl self.$name.SetViewEOL($view_eol)
      #nl self.$name.SetViewWhiteSpace($view_whitespace)
      #nl self.$name.SetMarginWidth(2, 0)
      #nl self.$name.SetIndentationGuides($indentation_guides)
      #nl self.$name.SetReadOnly($read_only)
      #ifequal $folding "1"
      @{
        #nl self.$name.SetMarginType(1, wx.stc.STC_MARGIN_SYMBOL)
        #nl self.$name.SetMarginMask(1, wx.stc.STC_MASK_FOLDERS)
        #nl self.$name.SetMarginWidth(1, 16)
        #nl self.$name.SetMarginSensitive(1, True)
        #nl self.$name.SetProperty("fold", "1")
        #nl self.$name.SetFoldFlags(wx.stc.STC_FOLDFLAG_LINEBEFORE_CONTRACTED | wx.stc.STC_FOLDFLAG_LINEAFTER_CONTRACTED)
      @}
      #ifnotequal $folding "1"
      @{
        #nl self.$name.SetMarginWidth(1, 0)
      @}
      #ifequal $line_numbers "1"
      @{
        #nl self.$name.SetMarginType(0, wx.stc.STC_MARGIN_NUMBER)
        #nl self.$name.SetMarginWidth(0, self.$name.TextWidth(wx.stc.STC_STYLE_LINENUMBER, "_99999"))
      @}
      #ifnotequal $line_numbers "1"
      @{
        #nl self.$name.SetMarginWidth(0, 0)
      @}
      #ifnotnull $font
      @{
        #nl self.font = $font
        #nl self.$name.StyleSetFont(wx.stc.STC_STYLE_DEFAULT, self.font)
      @}
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDER, wx.stc.STC_MARK_BOXPLUS)
      #nl self.$name.MarkerSetBackground(wx.stc.STC_MARKNUM_FOLDER, wx.BLACK)
      #nl self.$name.MarkerSetForeground(wx.stc.STC_MARKNUM_FOLDER, wx.WHITE)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDEROPEN, wx.stc.STC_MARK_BOXMINUS)
      #nl self.$name.MarkerSetBackground(wx.stc.STC_MARKNUM_FOLDEROPEN, wx.BLACK)
      #nl self.$name.MarkerSetForeground(wx.stc.STC_MARKNUM_FOLDEROPEN, wx.WHITE)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDERSUB, wx.stc.STC_MARK_EMPTY)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDEREND, wx.stc.STC_MARK_BOXPLUS)
      #nl self.$name.MarkerSetBackground(wx.stc.STC_MARKNUM_FOLDEREND, wx.BLACK)
      #nl self.$name.MarkerSetForeground(wx.stc.STC_MARKNUM_FOLDEREND, wx.WHITE)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDEROPENMID, wx.stc.STC_MARK_BOXMINUS)
      #nl self.$name.MarkerSetBackground(wx.stc.STC_MARKNUM_FOLDEROPENMID, wx.BLACK)
      #nl self.$name.MarkerSetForeground(wx.stc.STC_MARKNUM_FOLDEROPENMID, wx.WHITE)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDERMIDTAIL, wx.stc.STC_MARK_EMPTY)
      #nl self.$name.MarkerDefine(wx.stc.STC_MARKNUM_FOLDERTAIL, wx.stc.STC_MARK_EMPTY)
      #nl self.$name.SetSelBackground(True, wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHT))
      #nl self.$name.SetSelForeground(True, wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHTTEXT))
    </template>
    <template name="include">import wx.stc</template>
  </templates>

</codegen>
